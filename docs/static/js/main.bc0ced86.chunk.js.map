{"version":3,"sources":["components/data.tsx","components/styled.tsx","components/table/TableHeader.tsx","components/miscellaneous/typography.tsx","components/editedComponents/EditingCells.tsx","components/miscellaneous/Modal.tsx","components/table/TableFooter.tsx","components/editedComponents/EditedRow.tsx","components/miscellaneous/Spinner.tsx","components/table/TableBody.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","getRows","get","then","response","data","items","reduce","acc","item","str","slice","date","Date","id","UPDATE_TIMESTAMP","toLocaleDateString","toLocaleTimeString","push","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","subtitle1","paddingBottom","createMuiTheme","palette","primary","main","StyledTableCell","withStyles","head","backgroundColor","color","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","StyledFilterButton","alignSelf","marginRight","TableHeader","props","columns","rows","orderBy","order","setOrder","setOrderBy","checkedAll","checkAll","setSelected","TableHead","Checkbox","inputProps","style","checked","onClick","newSelected","map","n","handleSelectAllClick","column","sortDirection","field","active","direction","label","TypographySelected","selected","align","flexGrow","borderBottom","length","TypographyNoFilters","colSpan","Typography","variant","textAlign","sourceMap","EditingCells","colsNames","values","handleChange","clients","setValues","handleDateChange","row","type","txtClasses","gutterBottom","className","TextField","defaultValue","name","size","InputProps","InputLabelProps","onChange","placeholder","select","SelectProps","native","source","value","Autocomplete","options","e","newValue","getOptionLabel","option","renderInput","params","utils","DateFnsUtils","ThemeProvider","DatePicker","openTo","views","_","uniqueId","FilterModal","DESCRIPTION","SOURCE_NM","CLIENT_NM","TERMINATION_DT","VALUE_3","open","onClose","filterData","useState","filters","setFilters","handleClose","arg","Dialog","aria-labelledby","PaperProps","DialogTitle","DialogContent","paddingLeft","overflowY","DialogContentText","Table","TableBody","display","flexDirection","event","target","month","getMonth","toString","year","getFullYear","newDate","padStart","DialogActions","TableFooterC","rowsPerPage","edited","activeFilter","setRowsData","toggleFilter","page","setPage","setRowsPerPage","React","filterModal","openFilterModal","TableFooter","criteria","Object","keys","filter","key","newData","every","toLowerCase","includes","handleFiltering","disabled","Promise","resolve","v","TablePagination","count","onChangeRowsPerPage","newRows","parseInt","onChangePage","EditedRow","saveData","Spinner","CircularProgress","TableBodyC","setEdited","col","array","sorted","sortBy","obj","reverse","stableSort","isItemSelected","indexOf","filtered","handleSelect","rowData","handleEditing","App","classes","setColumnsData","useEffect","colsData","a","config","headerName","sortable","cols","rowsData","Paper","TableContainer","component","aria-label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QACMA,EAAQC,EAAQ,KAASC,QAElBC,EAAU,WAiBrB,OAhBgBH,EAAMI,IACpB,gEAEmBC,MAAK,SAACC,GAAD,OACxBA,EAASC,KAAKC,MAAMC,QAAO,SAACC,EAAiBC,GAC3C,IAAIC,EAAMD,EAAI,iBAAqBE,MAAM,GAAI,GACzCC,EAAO,IAAIC,KAAKH,GAChBL,EAAI,2BACHI,GADG,IAENK,GAAIL,EAAI,GACRM,iBAAiB,GAAD,OAAKH,EAAKI,qBAAV,YAAkCJ,EAAKK,wBAGzD,OADAT,EAAIU,KAAKb,GACFG,IACN,Q,6DCRMW,EAAYC,aAAW,SAACC,GAAD,MAAY,CAC9CC,KAAM,CACJC,MAAO,OACPC,SAAU,QAEZC,MAAO,CACLF,MAAO,OACPG,aAAcL,EAAMM,QAAQ,IAE9BC,MAAO,CACLC,SAAU,KAEZC,eAAgB,CACdC,OAAQ,EACRC,KAAM,gBACNC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVC,QAAS,EACTC,SAAU,WACVC,IAAK,GACLf,MAAO,GAETgB,UAAW,CACTC,cAAe,YAINnB,EAAQoB,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKCC,EAAkBC,aAAW,SAACzB,GAAD,MAAY,CACpD0B,KAAM,CACJC,gBAAiB3B,EAAMqB,QAAQC,QAAQC,KACvCK,MAAO5B,EAAMqB,QAAQQ,OAAOC,UAHDL,CAK3BM,KAESC,EAAiBP,aAAW,SAACzB,GAAD,MAAY,CACnDC,KAAM,CACJ,sBAAuB,CACrB0B,gBAAiB,WAEnB,uCAAwC,CACtCA,gBAAiB,eANOF,CAS1BQ,KAESC,EAAmBT,aAAW,SAACzB,GAAD,MAAY,CACrDmC,KAAM,CACJR,gBAAiB,cAFWF,CAI5BM,KAESK,EAAgBX,aAAW,SAACzB,GAAD,MAAY,CAClDmC,KAAM,CACJR,gBAAiB,cAFQF,CAIzBM,KAESM,EAAuBZ,aAAW,SAACzB,GAAD,MAAY,CACzDC,KAAM,CACJE,SAAU,OACV,mBAAoB,CAClByB,MAAO,SAET,6BAA8B,CAC5BA,MAAO,UAGXU,KAAM,CACJV,MAAO,yBAXyBH,CAahCc,KAESC,EAAmBf,aAAW,SAACzB,GAAD,MAAY,CACrDC,KAAM,CACJ2B,MAAO5B,EAAMqB,QAAQC,QAAQC,KAC7BI,gBAAiB,QACjBjB,OAAQ,oBACR,UAAW,CACTiB,gBAAiB,UACjBjB,OAAQ,yBAPkBe,CAU5BgB,KAESC,EAAqBjB,aAAW,SAACzB,GAAD,MAAY,CACvDC,KAAM,CACJ2B,MAAO,QACPe,UAAW,SACX,UAAW,CACThB,gBAAiB,WAEnBiB,YAAa,OAPiBnB,CAS9BgB,K,yBC5CWI,EA/DK,SAACC,GAAgB,IAEjCC,EASED,EATFC,QACAC,EAQEF,EARFE,KACAC,EAOEH,EAPFG,QACAC,EAMEJ,EANFI,MACAC,EAKEL,EALFK,SACAC,EAIEN,EAJFM,WACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,SACAC,EACET,EADFS,YAmBF,OACE,cAACC,EAAA,EAAD,UACE,eAACvB,EAAA,EAAD,WACE,cAACT,EAAD,CAAiBT,QAAQ,WAAzB,SACE,cAAC0C,EAAA,EAAD,CACEC,WAAY,CAAE,aAAc,cAC5BC,MAAO,CAAE/B,MAAO,SAChBgC,QAASP,EACTQ,QAAS,kBAnBU,WAC3B,GAAKR,EAKHC,GAAS,GACTC,EAAY,QANG,CACf,IAAMO,EAAcd,EAAKe,KAAI,SAACC,GAAD,OAAYA,EAAEvE,MAC3C6D,GAAS,GACTC,EAAYO,IAeSG,QAGlBlB,EAAQgB,KAAI,SAACG,GAAD,OACX,cAAC1C,EAAD,CAEE/B,GAAIyE,EAAOzE,GACXS,MAAOgE,EAAOhE,MACdiE,cAAelB,IAAYiB,EAAOE,OAAQlB,EAJ5C,SAME,cAACb,EAAD,CACE5C,GAAIyE,EAAOzE,GACX4E,OAAQpB,IAAYiB,EAAOE,MAC3BE,UAAWrB,IAAYiB,EAAOE,MAAQlB,EAAQ,MAC9CW,QAAS,kBAtCMO,EAsCkBF,EAAOE,MArClDjB,EAAmB,QAAVD,EAAkB,OAAS,YACpCE,EAAWgB,GAFa,IAACA,GAkCjB,SAMGF,EAAOK,SAXLL,EAAOzE,OAehB,cAAC+B,EAAD,CAAiBT,QAAQ,mB,oCC1DpByD,EAAqB,SAAC1B,GAAgC,IAC3D2B,EAAa3B,EAAb2B,SACN,OACE,cAAC1C,EAAA,EAAD,CAAW2C,MAAM,OAAOf,MAAO,CAAEgB,SAAU,EAAGC,aAAc,QAA5D,SACGH,EAASI,OACc,IAApBJ,EAASI,OAAT,4BAEKJ,EAASI,OAFd,mBAGA,MAKGC,EAAsB,WACjC,OACE,cAAC7C,EAAA,EAAD,UACE,cAACF,EAAA,EAAD,CAAWgD,QAAS,GAApB,SACE,cAACC,EAAA,EAAD,CACEC,QAAQ,KACRtB,MAAO,CAAEuB,UAAW,SAAUrE,OAAQ,QAFxC,gD,oHCRFsE,GAAY,CAAC,MAAO,MAAO,QACpBC,GAAe,SAACtC,GAAgB,IAEzCuC,EAQEvC,EARFuC,UACAC,EAOExC,EAPFwC,OACAC,EAMEzC,EANFyC,aACAC,EAKE1C,EALF0C,QACAC,EAIE3C,EAJF2C,UACAC,EAGE5C,EAHF4C,iBACAC,EAEE7C,EAFF6C,IACAC,EACE9C,EADF8C,KAEIC,EAAa/F,IAEnB,OAAOuF,EAAUtB,KAAI,SAACK,GACpB,OAAQA,GACN,IAAK,cACH,OACE,eAACrC,EAAA,EAAD,WACY,SAAT6D,GACC,cAACZ,EAAA,EAAD,CACEC,QAAQ,YACRa,cAAY,EACZC,UAAWF,EAAW3E,UAHxB,+BASF,cAAC8E,EAAA,EAAD,CACEC,aAAcX,EAAOlB,GACrB8B,KAAM9B,EACN+B,KAAK,QACL1G,GAAG,cACHkE,MAAO,CAAExD,SAAU,OAAQD,MAAO,QAClCkG,WAAY,CAAEzC,MAAO,CAAExD,SAAU,KACjCkG,gBAAiB,CAAE1C,MAAO,CAAExD,SAAU,KACtCmG,SAAUf,EACVgB,YAAsB,SAATX,EAAkB,eAAiB,OApBrC,UAwBnB,IAAK,YACH,OACE,eAAC7D,EAAA,EAAD,WACY,SAAT6D,GACC,cAACZ,EAAA,EAAD,CACEC,QAAQ,YACRa,cAAY,EACZC,UAAWF,EAAW3E,UAHxB,qBAQF,cAAC8E,EAAA,EAAD,CACEvG,GAAG,gBACH+G,QAAM,EACNP,aAAcX,EAAOlB,GACrB8B,KAAM9B,EACNkC,SAAUf,EACVa,WAAY,CAAEzC,MAAO,CAAExD,SAAU,KACjCsG,YAAa,CACXC,QAAQ,GARZ,SAWY,SAATd,EACG,CAAC,OAAD,OAAWT,IAAWpB,KAAI,SAAC4C,GAAD,OACxB,wBAAqBC,MAAOD,EAA5B,SACGA,GADUA,MAIfxB,GAAUpB,KAAI,SAAC4C,GAAD,OACZ,wBAAqBC,MAAOD,EAA5B,SACGA,GADUA,UA5BR,UAmCnB,IAAK,YACH,OACE,eAAC5E,EAAA,EAAD,WACY,SAAT6D,GACC,cAACZ,EAAA,EAAD,CACEC,QAAQ,YACRa,cAAY,EACZC,UAAWF,EAAW3E,UAHxB,0BAQF,cAAC2F,EAAA,EAAD,CACEpH,GAAG,gBACH0G,KAAK,QACLW,QAAStB,EACTc,SAAU,SAACS,EAAGC,GAAJ,OACRvB,EAAU,2BAAKH,GAAN,kBAAelB,EAAQ4C,MAElCf,aAAcX,EAAOlB,GACrB6C,eAAgB,SAACC,GAAD,OAAqBA,GAAkB,IACvDvD,MAAO,CAAEzD,MAAO,OAAQC,SAAU,IAClCgH,YAAa,SAACC,GAAD,OACX,cAACpB,EAAA,EAAD,2BACMoB,GADN,IAEEnC,QAAQ,WACRsB,YAAsB,SAATX,EAAkB,MAAQ,WAxBhC,UA8BnB,IAAK,iBACH,OACE,eAAC7D,EAAA,EAAD,WACY,SAAT6D,GACC,cAACZ,EAAA,EAAD,CACEC,QAAQ,YACRa,cAAY,EACZC,UAAWF,EAAW3E,UAHxB,+BAQF,cAAC,IAAD,CAAyBmG,MAAOC,KAAhC,SACE,cAACC,EAAA,EAAD,CAAevH,MAAOA,EAAtB,SACE,cAACwH,EAAA,EAAD,CACEvC,QAAQ,SACRwC,OAAO,OACPvB,KAAM9B,EACNsD,MAAO,CAAC,OAAQ,SAChBd,MACW,SAAThB,EAAkBN,EAAOlB,GAAS,IAAI5E,KAAK8F,EAAOlB,IAEpDkC,SAAUZ,UApBH,UA0BnB,IAAK,UACH,OACE,eAAC3D,EAAA,EAAD,WACY,SAAT6D,GACC,cAACZ,EAAA,EAAD,CACEC,QAAQ,YACRa,cAAY,EACZC,UAAWF,EAAW3E,UAHxB,wBAQF,cAAC8E,EAAA,EAAD,CACEvG,GAAG,kBACHmG,KAAK,SACLK,aAAcX,EAAOlB,GACrBgC,WAAY,CACVzC,MAAO,CAAExD,SAAU,KAErBkG,gBAAiB,CACf1C,MAAO,CAAExD,SAAU,KAErB+F,KAAM9B,EACNkC,SAAUf,EACVgB,YAAsB,SAATX,EAAkB,kBAAoB,OAtBxC,UA0BnB,QACE,OAAO,cAAC7D,EAAA,EAAD,UAA+B4D,EAAIvB,IAAnBuD,IAAEC,iBChFlBC,GAzFK,SAAC/E,GACnB,IAAI6C,EAAM,CACRmC,YAAa,GACbC,UAAW,GACXC,UAAW,KACXC,eAAgB,KAChBC,QAAS,MAEHC,EAAuCrF,EAAvCqF,KAAMC,EAAiCtF,EAAjCsF,QAAS5C,EAAwB1C,EAAxB0C,QAAS6C,EAAevF,EAAfuF,WARE,EASNC,mBAAS3C,GATH,mBAS7B4C,EAT6B,KASpBC,EAToB,KAkB5BC,EAAc,SAACC,GACP,WAARA,GACFF,EAAW7C,GACXyC,MAEAI,EAAW7C,GACX0C,EAAWE,KAiBf,OACE,eAACI,EAAA,EAAD,CACER,KAAMA,EACNC,QAASA,EACTQ,kBAAgB,oBAChBC,WAAY,CACVlF,MAAO,CACLzD,MAAO,IACPa,QAAS,cAPf,UAWE,cAAC+H,EAAA,EAAD,CAAarJ,GAAG,oBAAoBkE,MAAO,CAAE5C,QAAS,QAAtD,0BAGA,cAACgI,EAAA,EAAD,CAAepF,MAAO,CAAEqF,YAAa,OAAQC,UAAW,SAAxD,SACE,cAACC,EAAA,EAAD,8CAEF,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACnH,EAAA,EAAD,CACE0B,MAAO,CAAEzD,MAAO,OAAQmJ,QAAS,OAAQC,cAAe,UAD1D,SAGE,cAAC,GAAD,CACEjE,UAvDI,CACd,cACA,YACA,YACA,iBACA,WAmDUC,OAAQiD,EACRhD,aA/BS,SAACgE,GAAgD,IAC5DC,EAAWD,EAAXC,OACFtD,EAAgBsD,EAAhBtD,KAAMU,EAAU4C,EAAV5C,MACZ4B,EAAW,2BAAKD,GAAN,kBAAgBrC,EAAOU,MA6BvBpB,QAASA,EACTC,UAAW+C,EACX9C,iBA1Ca,SAACnG,GACxB,IAAIkK,GAASlK,EAAMmK,WAAa,GAAGC,WAC/BC,EAAI,OAAGrK,QAAH,IAAGA,OAAH,EAAGA,EAAMsK,cACbC,EAAO,UAAMF,EAAN,YAAcH,EAAMM,SAAS,EAAG,MAE3CvB,EAAW,2BAAKD,GAAN,IAAeN,eAAgB6B,MAsC/BnE,IAAKA,EACLC,KAAK,eAKb,eAACoE,EAAA,EAAD,WACE,cAACvH,EAAA,EAAD,CAAQoB,QAAS,kBAAM4E,EAAY,WAAW7G,MAAM,UAApD,oBAGA,cAACa,EAAA,EAAD,CAAQoB,QAAS,kBAAM4E,EAAY,SAAS7G,MAAM,UAAlD,2BClFKqI,GAAe,SAACnH,GAAgB,IAEzCE,EAYEF,EAZFE,KACAkH,EAWEpH,EAXFoH,YACAzF,EAUE3B,EAVF2B,SACA0F,EASErH,EATFqH,OACAC,EAQEtH,EARFsH,aACAxL,EAOEkE,EAPFlE,QACAyL,EAMEvH,EANFuH,YACAC,EAKExH,EALFwH,aACAC,EAIEzH,EAJFyH,KACA/E,EAGE1C,EAHF0C,QACAgF,EAEE1H,EAFF0H,QACAC,EACE3H,EADF2H,eAbwC,EAgBHC,IAAMpC,UAAkB,GAhBrB,mBAgBnCqC,EAhBmC,KAgBtBC,EAhBsB,KAsD1C,OACE,cAACzB,EAAA,EAAD,UACE,eAAC0B,EAAA,EAAD,CAAalH,MAAO,CAAE0F,QAAS,SAA/B,UACE,cAAC,GAAD,CACE7D,QAASA,EACT2C,KAAMwC,EACNvC,QAtCiB,WACvBwC,GAAgB,GAChBN,GAAa,IAqCPjC,WAAY,SAACrJ,GAAD,OArBI,SAACqJ,GACvB,IAAIyC,EAAWC,OAAOC,KAAK3C,GAAY4C,QAAO,SAACC,GAAD,OAAS7C,EAAW6C,MAC9DC,EAAUnI,EAAKiI,QAAO,SAACtF,GACzB,OAAOmF,EAASM,OAAM,SAAChM,GAAD,MACX,gBAATA,EACIuG,EAAIvG,GAAMiM,cAAcC,SAASjD,EAAWjJ,GAAMiM,eAClDhD,EAAWjJ,KAAUuG,EAAIvG,SAGjCiL,EAAYc,GACZP,GAAgB,GAChBN,GAAa,GAUoBiB,CAAgBvM,MAE7C,eAACiD,EAAA,EAAD,CAAU0B,MAAO,CAAE0F,QAAS,QAA5B,UACE,cAAC,EAAD,CAAoB5E,SAAUA,IAC9B,eAAC1C,EAAA,EAAD,CAAW4B,MAAO,CAAEiB,aAAc,OAAQ7D,QAAS,GAAnD,UACE,cAAC2B,EAAD,CACEuC,QAAQ,YACRrD,MAAM,UACNiC,QAnDY,WACtB+G,GAAgB,IAmDNY,UAAqB,IAAXrB,EAJZ,oBAQCC,GACC,cAAC3H,EAAA,EAAD,CACEwC,QAAQ,WACRrD,MAAM,UACN4J,UAAqB,IAAXrB,EACVtG,QAAS,kBACP4H,QAAQC,QAAQ9M,KACbE,MAAK,SAAC6M,GAAD,OAAOtB,EAAYsB,MACxB7M,MAAK,kBAAMwL,GAAa,OAP/B,8BAcJ,cAACsB,EAAA,EAAD,CACEC,MAAO7I,EAAK6B,OACZqF,YAAaA,EACb4B,oBA1DsB,SAAC/E,GAC/B,IAAMgF,EAAUhF,EAAEyC,OAAO5C,MACzB6D,EAAeuB,SAASD,IACxBvB,EAAQ,IAwDAD,KAAMA,EACN0B,aAnEe,SACvB1C,EACAgB,GAEAC,EAAQD,IAgEA5G,MAAO,CAAEiB,aAAc,mB,UCrDpBsH,GA7CG,SAACpJ,GAAgB,IAC3B6C,EAAsC7C,EAAtC6C,IAAKN,EAAiCvC,EAAjCuC,UAAW8G,EAAsBrJ,EAAtBqJ,SAAU3G,EAAY1C,EAAZ0C,QADA,EAEN8C,mBAAS3C,GAFH,mBAE3BL,EAF2B,KAEnBG,EAFmB,KAiBhC,OACE,eAACxD,EAAA,EAAD,WACE,cAACF,EAAA,EAAD,CAAWhB,QAAQ,WAAnB,SACE,cAAC0C,EAAA,EAAD,CAAUE,MAAO,CAAE/B,MAAO,WAAa4J,UAAQ,MAEjD,cAAC,GAAD,CACEnG,UAAWA,EACXC,OAAQA,EACRC,aAde,SAACgE,GAAgD,IAC5DC,EAAWD,EAAXC,OACFtD,EAAgBsD,EAAhBtD,KAAMU,EAAU4C,EAAV5C,MACZnB,EAAU,2BAAKH,GAAN,kBAAeY,EAAOU,MAY3BpB,QAASA,EACTC,UAAWA,EACXC,iBAxBmB,SAACnG,GACxB,IAAIkK,GAASlK,EAAMmK,WAAa,GAAGC,WAC/BC,EAAI,OAAGrK,QAAH,IAAGA,OAAH,EAAGA,EAAMsK,cACbC,EAAO,UAAMF,EAAN,YAAcH,EAAMM,SAAS,EAAG,MAC3CtE,EAAU,2BAAKH,GAAN,IAAc2C,eAAgB6B,MAqBnCnE,IAAKA,EACLC,KAAK,UAEP,cAAC7D,EAAA,EAAD,CAAwBhB,QAAQ,WAAhC,SACE,cAACyB,EAAD,CACEyC,QAAQ,YACRrD,MAAM,UACNiC,QAAS,kBAAMsI,EAAS7G,IAH1B,mBADcK,EAAIlG,MAdPkG,EAAIlG,K,UCZR2M,GAVC,WACd,OACE,cAACnK,EAAA,EAAD,UACE,cAACF,EAAA,EAAD,CAAWgD,QAAS,GAApB,SACE,cAACsH,GAAA,EAAD,CAAkBlG,KAAM,GAAIxC,MAAO,CAAE9C,OAAQ,gBCOxCyL,GAAa,SAACxJ,GAAgB,IAEvCE,EAaEF,EAbFE,KACAC,EAYEH,EAZFG,QACAC,EAWEJ,EAXFI,MACAqH,EAUEzH,EAVFyH,KACAL,EASEpH,EATFoH,YACAC,EAQErH,EARFqH,OACA5G,EAOET,EAPFS,YACAkB,EAME3B,EANF2B,SACA1B,EAKED,EALFC,QACAwJ,EAIEzJ,EAJFyJ,UACAlC,EAGEvH,EAHFuH,YACA7E,EAEE1C,EAFF0C,QACA4E,EACEtH,EADFsH,aAaF,IAAI/E,EAAYtC,EAAQgB,KAAI,SAACyI,GAAD,OAAcA,EAAIpI,SAyB9C,OACE,cAACgF,EAAA,EAAD,UACGpG,EAAK6B,OArCV,SAAoB4H,GAElB,IAAIC,EAAS/E,IAAEgF,OAAOF,GAAO,SAAUG,GACrC,MAA+B,kBAAjBA,EAAI3J,GACd2J,EAAI3J,GAASoI,cACbuB,EAAI3J,MAEV,MAAiB,QAAVC,EAAkBwJ,EAASA,EAAOG,UA+BrCC,CAAW9J,GACR1D,MAAMiL,EAAOL,EAAaK,EAAOL,EAAcA,GAC/CnG,KAAI,SAAC4B,GACJ,IA9BUlG,EA8BJsN,GA9BItN,EA8BwBkG,EAAIlG,IA9Ba,IAA1BgF,EAASuI,QAAQvN,IA+B1C,OAAO0K,IAAWxE,EAAIlG,GACpB,eAACuC,EAAD,CAA6ByC,SAAUsI,EAAvC,UACE,cAAChL,EAAA,EAAD,CAAWhB,QAAQ,WAAnB,SACE,cAAC0C,EAAA,EAAD,CACEE,MAAO,CAAE/B,MAAO,WAChBgC,QAASmJ,EACTlJ,QAAS,kBAnCN,SAACpE,GACpB,GAAIgF,EAAS6G,SAAS7L,GAAK,CACzB,IAAIwN,EAAWxI,EAASwG,QAAO,SAAC7L,GAAD,OAAkBA,IAASK,KAC1D8D,EAAY0J,QAEZ1J,EAAY,GAAD,oBAAKkB,GAAL,CAAehF,KA8BGyN,CAAavH,EAAIlG,SAGnC4F,EAAUtB,KAAI,SAACK,GACd,MAAc,YAAVA,GAAuBuB,EAAIvB,GAAS,IAC/BuB,EAAIvB,GAAS,IAClB,cAAClC,EAAD,UACGyD,EAAIvB,IADgBuD,IAAEC,YAIzB,cAACxF,EAAD,UACGuD,EAAIvB,IADauD,IAAEC,YAMtB,cAAC7F,EAAA,EAAD,UAA+B4D,EAAIvB,IAAnBuD,IAAEC,eAIxB,cAAC7F,EAAA,EAAD,CAAwBhB,QAAQ,WAAhC,SACE,cAACyB,EAAD,CACEyC,QAAQ,WACRrD,MAAM,UACNiC,QAAS,kBAAM0I,EAAU5G,EAAIlG,KAC7B+L,UAAqB,IAAXrB,GAAoBA,IAAWxE,EAAIlG,GAJ/C,mBADckG,EAAIlG,MAzBDkG,EAAIlG,IAqCzB,cAAC,GAAD,CACEkG,IAAKA,EACLN,UAAWA,EACX8G,SAAU,SAACnN,GAAD,OA7DF,SAACmO,GACrB,IAAIhC,EAAUnI,EAAKe,KAAI,SAAC4B,GACtB,OAAIA,EAAIlG,KAAO0K,EACNY,OAAOC,KAAKmC,GAASjO,QAAO,SAACC,EAAU+L,GAE5C,OADA/L,EAAI+L,GAAOiC,EAAQjC,GAAOiC,EAAQjC,GAAOvF,EAAIuF,GACtC/L,IACN,IACSwG,KAEhB0E,EAAYc,GACZoB,GAAU,GAmD2Ba,CAAcpO,IACvCwG,QAASA,GACJG,EAAIlG,OAIf2K,EACF,cAAC,EAAD,IAEA,cAAC,GAAD,O,oBC1BOiD,GAnFH,WACV,IAAMC,EAAUxN,IADA,EAEYwI,mBAAgB,IAF5B,mBAETtF,EAFS,KAEHqH,EAFG,OAGkB/B,mBAAgB,IAHlC,mBAGTvF,EAHS,KAGAwK,EAHA,OAIQ7C,IAAMpC,SAAS,GAJvB,mBAITiC,EAJS,KAIHC,EAJG,OAKsBE,IAAMpC,SAAiB,IAL7C,mBAKT4B,EALS,KAKIO,EALJ,OAMUC,IAAMpC,SAAuB,OANvC,mBAMTpF,EANS,KAMFC,EANE,OAOcuH,IAAMpC,SAAS,MAP7B,mBAOTrF,EAPS,KAOAG,EAPA,OAQgBsH,IAAMpC,SAAmB,IARzC,mBAQT7D,EARS,KAQClB,EARD,OASemH,IAAMpC,UAAkB,GATvC,mBASTjF,EATS,KASGC,EATH,OAUYoH,IAAMpC,UAAyB,GAV3C,mBAUT6B,EAVS,KAUDoC,EAVC,OAWqB7B,IAAMpC,UAAkB,GAX7C,mBAWT8B,EAXS,KAWKE,EAXL,KAahBkD,qBAAU,WACR,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,sEVLHjP,EAAMI,IACpB,gEAEsBC,MAAK,SAACC,GAAD,OAC3BgM,OAAOC,KAAKjM,EAASC,KAAK2O,QAAQzO,QAAO,SAACC,EAAiB+L,GACzD,IAAI3G,EAAQxF,EAASC,KAAK2O,OAAOzC,GAAK3G,MAClCvF,EAAI,2BACHD,EAASC,KAAK2O,OAAOzC,IADlB,IAEN9G,MAAO8G,EACP0C,WAAYrJ,EACZsJ,UAAU,EACVpO,GAAIkI,IAAEC,aAGR,OADAzI,EAAIU,KAAKb,GACFG,IACN,OUVc,OACX2O,EADW,OAEfP,EAAeO,GAFA,2CAAH,qDAIRC,EAAQ,uCAAG,4BAAAL,EAAA,sEACC9O,IADD,OACX+G,EADW,OAEf0E,EAAY1E,GAFG,2CAAH,qDAId8H,IACAM,MACC,IAEH,IAAIvI,GAAUxC,EAAKe,KAAI,SAAC4B,GAAD,OAASA,EAAG,aACnC,OACE,qBAAKI,UAAWuH,EAAQrN,KAAxB,SACE,eAAC+N,GAAA,EAAD,CAAOjI,UAAWuH,EAAQlN,MAA1B,UACE,cAAC6N,GAAA,EAAD,CAAgBC,UAAWF,KAA3B,SACE,eAAC7E,EAAA,EAAD,CACEgF,aAAW,eACXpI,UAAWuH,EAAQ/M,MACnB4F,KAAM,QACNxC,MAAO,CAAExD,SAAU,QAJrB,UAME,cAAC,EAAD,CACE4C,QAASA,EACTC,KAAMA,EACNE,MAAOA,EACPD,QAASA,EACTK,SAAUA,EACVD,WAAYA,EACZF,SAAUA,EACVC,WAAYA,EACZG,YAAaA,IAEf,cAAC,GAAD,CACEP,KAAMA,EACNC,QAASA,EACTC,MAAOA,EACPqH,KAAMA,EACNL,YAAaA,EACbC,OAAQA,EACR1F,SAAUA,EACV8H,UAAWA,EACXxJ,QAASA,EACTsH,YAAaA,EACb7E,QAASA,GACT4E,aAAcA,EACd7G,YAAaA,SAInB,cAAC,GAAD,CACEP,KAAMA,EACNkH,YAAaA,EACbzF,SAAUA,EACV0F,OAAQA,EACRC,aAAcA,EACdxL,QAASA,EACTyL,YAAaA,EACbC,aAAcA,EACdG,eAAgBA,EAChBF,KAAMA,EACNC,QAASA,EACThF,QAASA,WC9EJ4I,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxP,MAAK,YAAkD,IAA/CyP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvH,EAAA,EAAD,CAAevH,MAAOA,EAAtB,SACE,cAAC,GAAD,QAGJ+O,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.bc0ced86.chunk.js","sourcesContent":["import _ from \"lodash\";\nconst axios = require(\"axios\").default;\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  const rows = promise.then((response: any) =>\n    response.data.items.reduce((acc: Array<any>, item: any) => {\n      let str = item[\"UPDATE_TIMESTAMP\"].slice(0, -7);\n      let date = new Date(str);\n      let data = {\n        ...item,\n        id: item[\"ID\"],\n        UPDATE_TIMESTAMP: `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import {\n  withStyles,\n  makeStyles,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  subtitle1: {\n    paddingBottom: \"15px\",\n  },\n}));\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#5AA9E6\",\n    },\n  },\n});\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n\nexport const StyledFilterButton = withStyles((theme) => ({\n  root: {\n    color: \"white\",\n    alignSelf: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"#5AA9E6\",\n    },\n    marginRight: 10,\n  },\n}))(Button);\n","import TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { StyledTableCell, StyledTableSortLabel } from \"../styled\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nconst TableHeader = (props: any) => {\n  let {\n    columns,\n    rows,\n    orderBy,\n    order,\n    setOrder,\n    setOrderBy,\n    checkedAll,\n    checkAll,\n    setSelected,\n  } = props;\n\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n: any) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            inputProps={{ \"aria-label\": \"select all\" }}\n            style={{ color: \"white\" }}\n            checked={checkedAll}\n            onClick={() => handleSelectAllClick()}\n          />\n        </StyledTableCell>\n        {columns.map((column: any) => (\n          <StyledTableCell\n            key={column.id}\n            id={column.id}\n            width={column.width}\n            sortDirection={orderBy === column.field ? order : false}\n          >\n            <StyledTableSortLabel\n              id={column.id}\n              active={orderBy === column.field}\n              direction={orderBy === column.field ? order : \"asc\"}\n              onClick={() => handleRequestSort(column.field)}\n            >\n              {column.label}\n            </StyledTableSortLabel>\n          </StyledTableCell>\n        ))}\n        <StyledTableCell padding=\"checkbox\"></StyledTableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeader;\n","import TableCell from \"@material-ui/core/TableCell\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nexport const TypographySelected = (props: { selected: any[] }) => {\n  let { selected } = props;\n  return (\n    <TableCell align=\"left\" style={{ flexGrow: 1, borderBottom: \"none\" }}>\n      {selected.length\n        ? selected.length === 1\n          ? `1 item selected`\n          : `${selected.length} items selected`\n        : \"\"}\n    </TableCell>\n  );\n};\n\nexport const TypographyNoFilters = () => {\n  return (\n    <TableRow>\n      <TableCell colSpan={13}>\n        <Typography\n          variant=\"h6\"\n          style={{ textAlign: \"center\", margin: \"30px\" }}\n        >\n          No items matching set filters\n        </Typography>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { theme, useStyles } from \"../styled\";\n\nimport _ from \"lodash\";\n\nconst sourceMap = [\"DEV\", \"UAT\", \"PROD\"];\nexport const EditingCells = (props: any) => {\n  let {\n    colsNames,\n    values,\n    handleChange,\n    clients,\n    setValues,\n    handleDateChange,\n    row,\n    type,\n  } = props;\n  const txtClasses = useStyles();\n\n  return colsNames.map((field: string) => {\n    switch (field) {\n      case \"DESCRIPTION\":\n        return (\n          <TableCell key=\"edit_1\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Item description:\n              </Typography>\n            )}\n\n            <TextField\n              defaultValue={values[field]}\n              name={field}\n              size=\"small\"\n              id=\"input-descr\"\n              style={{ fontSize: \"11px\", width: \"100%\" }}\n              InputProps={{ style: { fontSize: 14 } }}\n              InputLabelProps={{ style: { fontSize: 14 } }}\n              onChange={handleChange}\n              placeholder={type === \"form\" ? \"Lorem ipsums\" : \"\"}\n            />\n          </TableCell>\n        );\n      case \"SOURCE_NM\":\n        return (\n          <TableCell key=\"edit_2\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Source:\n              </Typography>\n            )}\n            <TextField\n              id=\"select-source\"\n              select\n              defaultValue={values[field]}\n              name={field}\n              onChange={handleChange}\n              InputProps={{ style: { fontSize: 14 } }}\n              SelectProps={{\n                native: true,\n              }}\n            >\n              {type === \"form\"\n                ? [\"All\", ...sourceMap].map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))\n                : sourceMap.map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))}\n            </TextField>\n          </TableCell>\n        );\n      case \"CLIENT_NM\":\n        return (\n          <TableCell key=\"edit_3\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Client name:\n              </Typography>\n            )}\n            <Autocomplete\n              id=\"client-picker\"\n              size=\"small\"\n              options={clients}\n              onChange={(e, newValue) =>\n                setValues({ ...values, [field]: newValue })\n              }\n              defaultValue={values[field]}\n              getOptionLabel={(option: string) => (option ? option : \"\")}\n              style={{ width: \"100%\", fontSize: 14 }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  placeholder={type === \"form\" ? \"KOG\" : \"\"}\n                />\n              )}\n            />\n          </TableCell>\n        );\n      case \"TERMINATION_DT\":\n        return (\n          <TableCell key=\"edit_4\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Termination date:\n              </Typography>\n            )}\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <ThemeProvider theme={theme}>\n                <DatePicker\n                  variant=\"inline\"\n                  openTo=\"year\"\n                  name={field}\n                  views={[\"year\", \"month\"]}\n                  value={\n                    type === \"form\" ? values[field] : new Date(values[field])\n                  }\n                  onChange={handleDateChange}\n                />\n              </ThemeProvider>\n            </MuiPickersUtilsProvider>\n          </TableCell>\n        );\n      case \"VALUE_3\":\n        return (\n          <TableCell key=\"edit_5\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Max range:\n              </Typography>\n            )}\n            <TextField\n              id=\"standard-number\"\n              type=\"number\"\n              defaultValue={values[field]}\n              InputProps={{\n                style: { fontSize: 14 },\n              }}\n              InputLabelProps={{\n                style: { fontSize: 14 },\n              }}\n              name={field}\n              onChange={handleChange}\n              placeholder={type === \"form\" ? \"0 - 10000000000\" : \"\"}\n            />\n          </TableCell>\n        );\n      default:\n        return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n    }\n  });\n};\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { EditingCells } from \"../editedComponents/EditingCells\";\n\nconst FilterModal = (props: any) => {\n  let row = {\n    DESCRIPTION: \"\",\n    SOURCE_NM: \"\",\n    CLIENT_NM: null,\n    TERMINATION_DT: null,\n    VALUE_3: null,\n  };\n  const { open, onClose, clients, filterData } = props;\n  let [filters, setFilters] = useState(row);\n  let colsNames = [\n    \"DESCRIPTION\",\n    \"SOURCE_NM\",\n    \"CLIENT_NM\",\n    \"TERMINATION_DT\",\n    \"VALUE_3\",\n  ];\n\n  const handleClose = (arg: string) => {\n    if (arg === \"cancel\") {\n      setFilters(row);\n      onClose();\n    } else {\n      setFilters(row);\n      filterData(filters);\n    }\n  };\n\n  const handleDateChange = (date: Date | null) => {\n    let month = (date!.getMonth() + 1).toString();\n    let year = date?.getFullYear();\n    let newDate = `${year}-${month.padStart(2, \"0\")}`;\n    // @ts-ignore\n    setFilters({ ...filters, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    let { name, value } = target;\n    setFilters({ ...filters, [name]: value });\n  };\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n      PaperProps={{\n        style: {\n          width: 600,\n          padding: \"20px 30px\",\n        },\n      }}\n    >\n      <DialogTitle id=\"form-dialog-title\" style={{ padding: \"15px\" }}>\n        Data filters\n      </DialogTitle>\n      <DialogContent style={{ paddingLeft: \"15px\", overflowY: \"unset\" }}>\n        <DialogContentText>Choose fields to filter rows:</DialogContentText>\n      </DialogContent>\n      <Table>\n        <TableBody>\n          <TableRow\n            style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}\n          >\n            <EditingCells\n              colsNames={colsNames}\n              values={filters}\n              handleChange={handleChange}\n              clients={clients}\n              setValues={setFilters}\n              handleDateChange={handleDateChange}\n              row={row}\n              type=\"form\"\n            />\n          </TableRow>\n        </TableBody>\n      </Table>\n      <DialogActions>\n        <Button onClick={() => handleClose(\"cancel\")} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={() => handleClose(\"save\")} color=\"primary\">\n          Filter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default FilterModal;\n","import React from \"react\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { TypographySelected } from \"../miscellaneous/typography\";\nimport { StyledFilterButton } from \"../styled\";\nimport FilterModal from \"../miscellaneous/Modal\";\n\nexport const TableFooterC = (props: any) => {\n  let {\n    rows,\n    rowsPerPage,\n    selected,\n    edited,\n    activeFilter,\n    getRows,\n    setRowsData,\n    toggleFilter,\n    page,\n    clients,\n    setPage,\n    setRowsPerPage,\n  } = props;\n\n  const [filterModal, openFilterModal] = React.useState<boolean>(false);\n\n  const handleModalOpen = () => {\n    openFilterModal(true);\n  };\n\n  const handleModalClose = () => {\n    openFilterModal(false);\n    toggleFilter(false);\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows));\n    setPage(0);\n  };\n\n  const handleFiltering = (filterData: any) => {\n    let criteria = Object.keys(filterData).filter((key) => filterData[key]);\n    let newData = rows.filter((row: any) => {\n      return criteria.every((item) =>\n        item === \"DESCRIPTION\"\n          ? row[item].toLowerCase().includes(filterData[item].toLowerCase())\n          : filterData[item] === row[item]\n      );\n    });\n    setRowsData(newData);\n    openFilterModal(false);\n    toggleFilter(true);\n  };\n\n  return (\n    <Table>\n      <TableFooter style={{ display: \"block\" }}>\n        <FilterModal\n          clients={clients}\n          open={filterModal}\n          onClose={handleModalClose}\n          filterData={(data: any) => handleFiltering(data)}\n        />\n        <TableRow style={{ display: \"flex\" }}>\n          <TypographySelected selected={selected} />\n          <TableCell style={{ borderBottom: \"none\", padding: 8 }}>\n            <StyledFilterButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleModalOpen}\n              disabled={edited !== false}\n            >\n              Filter\n            </StyledFilterButton>\n            {activeFilter && (\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={edited !== false}\n                onClick={() =>\n                  Promise.resolve(getRows())\n                    .then((v) => setRowsData(v))\n                    .then(() => toggleFilter(false))\n                }\n              >\n                Clear filters\n              </Button>\n            )}\n          </TableCell>\n          <TablePagination\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ borderBottom: \"none\" }}\n          />\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n};\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { StyledEditButton } from \"../styled\";\n\nimport { EditingCells } from \"./EditingCells\";\n\nconst EditedRow = (props: any) => {\n  let { row, colsNames, saveData, clients } = props;\n  let [values, setValues] = useState(row);\n\n  const handleDateChange = (date: Date | null) => {\n    let month = (date!.getMonth() + 1).toString();\n    let year = date?.getFullYear();\n    let newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setValues({ ...values, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    let { name, value } = target;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell padding=\"checkbox\">\n        <Checkbox style={{ color: \"#5AA9E6\" }} disabled />\n      </TableCell>\n      <EditingCells\n        colsNames={colsNames}\n        values={values}\n        handleChange={handleChange}\n        clients={clients}\n        setValues={setValues}\n        handleDateChange={handleDateChange}\n        row={row}\n        type=\"table\"\n      />\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(values)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default EditedRow;\n","import CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nconst Spinner = () => {\n  return (\n    <TableRow>\n      <TableCell colSpan={13}>\n        <CircularProgress size={50} style={{ margin: \"0 50%\" }} />\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default Spinner;\n","import TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport {\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledEditButton,\n} from \"../styled\";\nimport EditedRow from \"../editedComponents/EditedRow\";\nimport { TypographyNoFilters } from \"../miscellaneous/typography\";\nimport Spinner from \"../miscellaneous/Spinner\";\n\nimport _ from \"lodash\";\n\nexport const TableBodyC = (props: any) => {\n  const {\n    rows,\n    orderBy,\n    order,\n    page,\n    rowsPerPage,\n    edited,\n    setSelected,\n    selected,\n    columns,\n    setEdited,\n    setRowsData,\n    clients,\n    activeFilter,\n  } = props;\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return typeof obj[orderBy] === \"string\"\n        ? obj[orderBy].toLowerCase()\n        : obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  let colsNames = columns.map((col: any) => col.field);\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item: string) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleEditing = (rowData: any) => {\n    let newData = rows.map((row: any) => {\n      if (row.id === edited) {\n        return Object.keys(rowData).reduce((acc: any, key) => {\n          acc[key] = rowData[key] ? rowData[key] : row[key];\n          return acc;\n        }, {});\n      } else return row;\n    });\n    setRowsData(newData);\n    setEdited(false);\n  };\n\n  return (\n    <TableBody>\n      {rows.length ? (\n        stableSort(rows)\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n          .map((row) => {\n            const isItemSelected = isSelected(row.id);\n            return edited !== row.id ? (\n              <StyledTableRow key={row.id} selected={isItemSelected}>\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    style={{ color: \"#5AA9E6\" }}\n                    checked={isItemSelected}\n                    onClick={() => handleSelect(row.id)}\n                  />\n                </TableCell>\n                {colsNames.map((field: string) => {\n                  if (field === \"VALUE_1\" && row[field] > 2000) {\n                    return row[field] < 3000 ? (\n                      <StyledYellowCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledYellowCell>\n                    ) : (\n                      <StyledRedCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledRedCell>\n                    );\n                  } else {\n                    return (\n                      <TableCell key={_.uniqueId()}>{row[field]}</TableCell>\n                    );\n                  }\n                })}\n                <TableCell key={row.id} padding=\"checkbox\">\n                  <StyledEditButton\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => setEdited(row.id)}\n                    disabled={edited !== false && edited !== row.id}\n                  >\n                    Edit\n                  </StyledEditButton>\n                </TableCell>\n              </StyledTableRow>\n            ) : (\n              <EditedRow\n                row={row}\n                colsNames={colsNames}\n                saveData={(data: any) => handleEditing(data)}\n                clients={clients}\n                key={row.id}\n              />\n            );\n          })\n      ) : activeFilter ? (\n        <TypographyNoFilters />\n      ) : (\n        <Spinner />\n      )}\n    </TableBody>\n  );\n};\n","import \"../App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport { useStyles } from \"./styled\";\nimport TableHeader from \"./table/TableHeader\";\nimport { TableFooterC as TableFooter } from \"./table/TableFooter\";\nimport { TableBodyC as TableBody } from \"./table/TableBody\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\n\nlet Order: \"asc\" | \"desc\";\n\nconst App = () => {\n  const classes = useStyles();\n  const [rows, setRowsData] = useState<any[]>([]);\n  const [columns, setColumnsData] = useState<any[]>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(false);\n  const [activeFilter, toggleFilter] = React.useState<boolean>(false);\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  let clients = rows.map((row) => row[\"CLIENT_NM\"]);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHeader\n              columns={columns}\n              rows={rows}\n              order={order}\n              orderBy={orderBy}\n              checkAll={checkAll}\n              checkedAll={checkedAll}\n              setOrder={setOrder}\n              setOrderBy={setOrderBy}\n              setSelected={setSelected}\n            />\n            <TableBody\n              rows={rows}\n              orderBy={orderBy}\n              order={order}\n              page={page}\n              rowsPerPage={rowsPerPage}\n              edited={edited}\n              selected={selected}\n              setEdited={setEdited}\n              columns={columns}\n              setRowsData={setRowsData}\n              clients={clients}\n              activeFilter={activeFilter}\n              setSelected={setSelected}\n            />\n          </Table>\n        </TableContainer>\n        <TableFooter\n          rows={rows}\n          rowsPerPage={rowsPerPage}\n          selected={selected}\n          edited={edited}\n          activeFilter={activeFilter}\n          getRows={getRows}\n          setRowsData={setRowsData}\n          toggleFilter={toggleFilter}\n          setRowsPerPage={setRowsPerPage}\n          page={page}\n          setPage={setPage}\n          clients={clients}\n        />\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./components/styled\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}