{"version":3,"sources":["data.tsx","styled.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","StyledTableCell","withStyles","head","backgroundColor","color","palette","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","App","useState","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","order","setOrder","orderBy","setOrderBy","selected","setSelected","checkedAll","checkAll","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","field","headerName","sortable","id","uniqueId","push","cols","rowsData","items","row","classes","colsNames","map","col","className","Paper","TableContainer","component","Table","aria-label","size","style","TableHead","Checkbox","inputProps","checked","onClick","newSelected","n","handleSelectAllClick","column","sortDirection","active","direction","TableBody","array","sorted","sortBy","obj","reverse","stableSort","slice","isItemSelected","indexOf","includes","filtered","filter","item","handleSelect","display","justifyContent","length","align","TablePagination","count","onChangePage","event","flexGrow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a77f5a7.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    Object.keys(response.data.items).reduce((acc: Array<any>, key) => {\n      let data = {\n        ...response.data.items[key],\n        id: response.data.items[key][\"ID\"],\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#5AA9E6\",\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledTableSortLabel,\n  useStyles,\n} from \"./styled\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"#\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    const isAsc = orderBy === field && order === \"asc\";\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  let colsNames = columns.map((col) => col.field);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all\" }}\n                    style={{ color: \"white\" }}\n                    checked={checkedAll}\n                    onClick={() => handleSelectAllClick()}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.field ? order : false}\n                  >\n                    <StyledTableSortLabel\n                      id={column.id}\n                      active={orderBy === column.field}\n                      direction={orderBy === column.field ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </StyledTableSortLabel>\n                  </StyledTableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  const isItemSelected = isSelected(row.id);\n                  return (\n                    <StyledTableRow key={row.id} selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          style={{ color: \"#5AA9E6\" }}\n                          checked={isItemSelected}\n                          onClick={() => handleSelect(row.id)}\n                        />\n                      </TableCell>\n                      {colsNames.map((field) => {\n                        if (field === \"VALUE_1\" && row[field] > 2000) {\n                          return row[field] < 3000 ? (\n                            <StyledYellowCell>{row[field]}</StyledYellowCell>\n                          ) : (\n                            <StyledRedCell>{row[field]}</StyledRedCell>\n                          );\n                        } else {\n                          return <TableCell>{row[field]}</TableCell>;\n                        }\n                      })}\n                    </StyledTableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TableRow style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          {selected.length ? (\n            <TableCell align=\"right\">\n              {selected.length === 1\n                ? `1 item selected`\n                : `${selected.length} items selected`}\n            </TableCell>\n          ) : null}\n          <TablePagination\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ flexGrow: 1 }}\n          />\n        </TableRow>\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}