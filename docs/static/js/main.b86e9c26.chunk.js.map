{"version":3,"sources":["components/data.tsx","components/styled.tsx","components/table/TableHeader.tsx","components/miscellaneous/typography.tsx","components/editedComponents/EditingCells.tsx","components/miscellaneous/Modal.tsx","components/table/TableFooter.tsx","components/editedComponents/EditedRow.tsx","components/miscellaneous/Spinner.tsx","components/table/TableBody.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Source","DataType","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","subtitle1","paddingBottom","createMuiTheme","palette","primary","main","StyledTableCell","withStyles","head","backgroundColor","color","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","StyledFilterButton","alignSelf","marginRight","getRows","a","axios","get","response","data","items","map","item","id","ID","UPDATE_TIMESTAMP","dateString","Date","slice","getColumns","Object","keys","config","reduce","acc","key","label","field","headerName","sortable","_","uniqueId","push","TableHeader","props","columns","rows","orderBy","order","setOrder","setOrderBy","checkedAll","checkAll","setSelected","TableHead","Checkbox","inputProps","style","checked","onClick","newSelected","n","handleSelectAllClick","column","sortDirection","active","direction","TypographySelected","selected","align","flexGrow","borderBottom","length","TypographyNoFilters","colSpan","Typography","variant","textAlign","EditingCells","colsNames","values","handleChange","clients","setValues","handleDateChange","row","type","txtClasses","gutterBottom","className","TextField","defaultValue","name","size","InputProps","InputLabelProps","onChange","placeholder","select","SelectProps","native","source","value","Autocomplete","options","e","newValue","getOptionLabel","option","renderInput","params","utils","DateFnsUtils","ThemeProvider","DatePicker","openTo","views","toString","FilterModal","DESCRIPTION","SOURCE_NM","CLIENT_NM","TERMINATION_DT","VALUE_3","open","onClose","filterData","useState","filters","setFilters","handleClose","arg","Dialog","aria-labelledby","PaperProps","DialogTitle","DialogContent","paddingLeft","overflowY","DialogContentText","Table","TableBody","display","flexDirection","event","target","date","month","getMonth","year","getFullYear","newDate","padStart","DialogActions","TableFooterC","rowsPerPage","edited","activeFilter","setRowsData","toggleFilter","page","setPage","setRowsPerPage","React","filterModal","openFilterModal","TableFooter","criteria","filter","newData","every","toLowerCase","includes","handleFiltering","disabled","Promise","resolve","then","v","TablePagination","count","onChangeRowsPerPage","newRows","parseInt","onChangePage","pageNum","EditedRow","saveData","Spinner","CircularProgress","stableSort","array","sorted","sortBy","obj","reverse","TableBodyC","setEdited","useMemo","col","isItemSelected","indexOf","filtered","handleSelect","toLocaleDateString","toLocaleTimeString","rowData","handleEditing","App","classes","setColumnsData","useEffect","cols","Paper","TableContainer","component","aria-label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b86e9c26.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport axios from \"axios\";\n\nexport enum Source {\n  UAT = \"UAT\",\n  PROD = \"PROD\",\n  DEV = \"DEV\",\n}\n\nexport enum DataType {\n  STRING = \"STRING\",\n  NUMERIC = \"NUMERIC\",\n  DATE = \"DATE\",\n  TIMESTAMP = \"TIMESTAMP\",\n}\n\nexport interface Data {\n  RN: number;\n  IS_ACTIVE: boolean;\n  ID: string;\n  DESCRIPTION: string;\n  SOURCE_ID: number;\n  SOURCE_NM: Source;\n  CLIENT_ID: number;\n  CLIENT_NM: string;\n  ACTIVATION_DT: Date;\n  TERMINATION_DT: Date;\n  VALUE_1: number;\n  VALUE_2: number;\n  VALUE_3: number;\n  UPDATED_BY: string;\n  UPDATE_TIMESTAMP: Date;\n}\n\nexport interface Config {\n  field: string;\n  headerName: string;\n  sortable: boolean;\n  id: number;\n  width: number;\n  label: string;\n  type: DataType;\n}\n\nconst DATA_URL = \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\";\nconst CONFIG_URL =\n  \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\";\n\nconst formatDate = (dateString: string) => new Date(dateString.slice(0, -7));\n\nexport const getRows = async (): Promise<Data[]> => {\n  const response = await axios.get(DATA_URL);\n  return response.data.items.map((item: any) => ({\n    ...item,\n    id: item.ID,\n    UPDATE_TIMESTAMP: formatDate(item.UPDATE_TIMESTAMP),\n  }));\n};\n\nexport const getColumns = async (): Promise<Config[]> => {\n  const response = await axios.get(CONFIG_URL);\n  return Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n    const { label } = response.data.config[key];\n    const data = {\n      ...response.data.config[key],\n      field: key,\n      headerName: label,\n      sortable: true,\n      id: _.uniqueId(),\n    };\n    acc.push(data);\n    return acc;\n  }, []);\n};\n","import {\n  withStyles,\n  makeStyles,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  subtitle1: {\n    paddingBottom: \"15px\",\n  },\n}));\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#5AA9E6\",\n    },\n  },\n});\n\nexport const StyledTableCell = withStyles(() => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(() => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles(() => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles(() => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles(() => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles(() => ({\n  root: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n\nexport const StyledFilterButton = withStyles(() => ({\n  root: {\n    color: \"white\",\n    alignSelf: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"#5AA9E6\",\n    },\n    marginRight: 10,\n  },\n}))(Button);\n","import React from \"react\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { StyledTableCell, StyledTableSortLabel } from \"../styled\";\n\nconst TableHeader = (props: any) => {\n  const {\n    columns,\n    rows,\n    orderBy,\n    order,\n    setOrder,\n    setOrderBy,\n    checkedAll,\n    checkAll,\n    setSelected,\n  } = props;\n\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n: any) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            inputProps={{ \"aria-label\": \"select all\" }}\n            style={{ color: \"white\" }}\n            checked={checkedAll}\n            onClick={() => handleSelectAllClick()}\n          />\n        </StyledTableCell>\n        {columns.map((column: any) => (\n          <StyledTableCell\n            key={column.id}\n            id={column.id}\n            width={column.width}\n            sortDirection={orderBy === column.field ? order : false}\n          >\n            <StyledTableSortLabel\n              id={column.id}\n              active={orderBy === column.field}\n              direction={orderBy === column.field ? order : \"asc\"}\n              onClick={() => handleRequestSort(column.field)}\n            >\n              {column.label}\n            </StyledTableSortLabel>\n          </StyledTableCell>\n        ))}\n        <StyledTableCell padding=\"checkbox\" />\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nexport const TypographySelected = (props: { selected: any[] }) => {\n  const { selected } = props;\n  return (\n    <TableCell align=\"left\" style={{ flexGrow: 1, borderBottom: \"none\" }}>\n      {selected.length\n        ? selected.length === 1\n          ? `1 item selected`\n          : `${selected.length} items selected`\n        : \"\"}\n    </TableCell>\n  );\n};\n\nexport const TypographyNoFilters = () => (\n  <TableRow>\n    <TableCell colSpan={13}>\n      <Typography variant=\"h6\" style={{ textAlign: \"center\", margin: \"30px\" }}>\n        No items matching set filters\n      </Typography>\n    </TableCell>\n  </TableRow>\n);\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport _ from \"lodash\";\nimport { theme, useStyles } from \"../styled\";\nimport { Source } from \"../data\";\n\nconst EditingCells = (props: any) => {\n  const {\n    colsNames,\n    values,\n    handleChange,\n    clients,\n    setValues,\n    handleDateChange,\n    row,\n    type,\n  } = props;\n  const txtClasses = useStyles();\n\n  return colsNames.map((field: string) => {\n    switch (field) {\n      case \"DESCRIPTION\":\n        return (\n          <TableCell key=\"edit_1\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Item description:\n              </Typography>\n            )}\n\n            <TextField\n              defaultValue={values[field]}\n              name={field}\n              size=\"small\"\n              id=\"input-descr\"\n              style={{ fontSize: \"11px\", width: \"100%\" }}\n              InputProps={{ style: { fontSize: 14 } }}\n              InputLabelProps={{ style: { fontSize: 14 } }}\n              onChange={handleChange}\n              placeholder={type === \"form\" ? \"Lorem ipsums\" : \"\"}\n            />\n          </TableCell>\n        );\n      case \"SOURCE_NM\":\n        return (\n          <TableCell key=\"edit_2\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Source:\n              </Typography>\n            )}\n            <TextField\n              id=\"select-source\"\n              select\n              defaultValue={values[field]}\n              name={field}\n              onChange={handleChange}\n              InputProps={{ style: { fontSize: 14 } }}\n              SelectProps={{\n                native: true,\n              }}\n            >\n              {type === \"form\"\n                ? [\"All\", ...Object.values(Source)].map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))\n                : Object.values(Source).map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))}\n            </TextField>\n          </TableCell>\n        );\n      case \"CLIENT_NM\":\n        return (\n          <TableCell key=\"edit_3\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Client name:\n              </Typography>\n            )}\n            <Autocomplete\n              id=\"client-picker\"\n              size=\"small\"\n              options={clients}\n              onChange={(e, newValue) =>\n                setValues({ ...values, [field]: newValue })\n              }\n              defaultValue={values[field]}\n              getOptionLabel={(option: string) => option || \"\"}\n              style={{ width: \"100%\", fontSize: 14 }}\n              renderInput={(params) => (\n                <TextField\n                  /* eslint-disable react/jsx-props-no-spreading */\n                  {...params}\n                  variant=\"outlined\"\n                  placeholder={type === \"form\" ? \"KOG\" : \"\"}\n                />\n              )}\n            />\n          </TableCell>\n        );\n      case \"TERMINATION_DT\":\n        return (\n          <TableCell key=\"edit_4\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Termination date:\n              </Typography>\n            )}\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <ThemeProvider theme={theme}>\n                <DatePicker\n                  variant=\"inline\"\n                  openTo=\"year\"\n                  name={field}\n                  views={[\"year\", \"month\"]}\n                  value={\n                    type === \"form\" ? values[field] : new Date(values[field])\n                  }\n                  onChange={handleDateChange}\n                />\n              </ThemeProvider>\n            </MuiPickersUtilsProvider>\n          </TableCell>\n        );\n      case \"VALUE_3\":\n        return (\n          <TableCell key=\"edit_5\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Max range:\n              </Typography>\n            )}\n            <TextField\n              id=\"standard-number\"\n              type=\"number\"\n              defaultValue={values[field]}\n              InputProps={{\n                style: { fontSize: 14 },\n              }}\n              InputLabelProps={{\n                style: { fontSize: 14 },\n              }}\n              name={field}\n              onChange={handleChange}\n              placeholder={type === \"form\" ? \"0 - 10000000000\" : \"\"}\n            />\n          </TableCell>\n        );\n      default:\n        return (\n          <TableCell key={_.uniqueId()}>{row[field].toString()}</TableCell>\n        );\n    }\n  });\n};\n\nexport default EditingCells;\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport EditingCells from \"../editedComponents/EditingCells\";\n\nconst FilterModal = (props: any) => {\n  const row = {\n    DESCRIPTION: \"\",\n    SOURCE_NM: \"\",\n    CLIENT_NM: null,\n    TERMINATION_DT: null,\n    VALUE_3: null,\n  };\n  const { open, onClose, clients, filterData } = props;\n  const [filters, setFilters] = useState(row);\n  const colsNames = [\n    \"DESCRIPTION\",\n    \"SOURCE_NM\",\n    \"CLIENT_NM\",\n    \"TERMINATION_DT\",\n    \"VALUE_3\",\n  ];\n\n  const handleClose = (arg: string) => {\n    if (arg === \"cancel\") {\n      setFilters(row);\n      onClose();\n    } else {\n      setFilters(row);\n      filterData(filters);\n    }\n  };\n\n  const handleDateChange = (date: Date | null) => {\n    const month = (date!.getMonth() + 1).toString();\n    const year = date?.getFullYear();\n    const newDate = `${year}-${month.padStart(2, \"0\")}`;\n    // @ts-ignore\n    setFilters({ ...filters, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { name, value } = target;\n    setFilters({ ...filters, [name]: value });\n  };\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n      PaperProps={{\n        style: {\n          width: 600,\n          padding: \"20px 30px\",\n        },\n      }}\n    >\n      <DialogTitle id=\"form-dialog-title\" style={{ padding: \"15px\" }}>\n        Data filters\n      </DialogTitle>\n      <DialogContent style={{ paddingLeft: \"15px\", overflowY: \"unset\" }}>\n        <DialogContentText>Choose fields to filter rows:</DialogContentText>\n      </DialogContent>\n      <Table>\n        <TableBody>\n          <TableRow\n            style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}\n          >\n            <EditingCells\n              colsNames={colsNames}\n              values={filters}\n              handleChange={handleChange}\n              clients={clients}\n              setValues={setFilters}\n              handleDateChange={handleDateChange}\n              row={row}\n              type=\"form\"\n            />\n          </TableRow>\n        </TableBody>\n      </Table>\n      <DialogActions>\n        <Button onClick={() => handleClose(\"cancel\")} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={() => handleClose(\"save\")} color=\"primary\">\n          Filter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default FilterModal;\n","import React from \"react\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { TypographySelected } from \"../miscellaneous/typography\";\nimport { StyledFilterButton } from \"../styled\";\nimport FilterModal from \"../miscellaneous/Modal\";\n\nconst TableFooterC = (props: any) => {\n  const {\n    rows,\n    rowsPerPage,\n    selected,\n    edited,\n    activeFilter,\n    getRows,\n    setRowsData,\n    toggleFilter,\n    page,\n    clients,\n    setPage,\n    setRowsPerPage,\n  } = props;\n\n  const [filterModal, openFilterModal] = React.useState<boolean>(false);\n\n  const handleModalOpen = () => {\n    openFilterModal(true);\n  };\n\n  const handleModalClose = () => {\n    openFilterModal(false);\n    toggleFilter(false);\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    pageNum: number\n  ) => {\n    setPage(pageNum);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows, 10));\n    setPage(0);\n  };\n\n  const handleFiltering = (filterData: any) => {\n    const criteria = Object.keys(filterData).filter((key) => filterData[key]);\n    const newData = rows.filter((row: any) =>\n      criteria.every((item) =>\n        item === \"DESCRIPTION\"\n          ? row[item].toLowerCase().includes(filterData[item].toLowerCase())\n          : filterData[item] === row[item]\n      )\n    );\n    setRowsData(newData);\n    openFilterModal(false);\n    toggleFilter(true);\n  };\n\n  return (\n    <Table>\n      <TableFooter style={{ display: \"block\" }}>\n        <FilterModal\n          clients={clients}\n          open={filterModal}\n          onClose={handleModalClose}\n          filterData={(data: any) => handleFiltering(data)}\n        />\n        <TableRow style={{ display: \"flex\" }}>\n          <TypographySelected selected={selected} />\n          <TableCell style={{ borderBottom: \"none\", padding: 8 }}>\n            <StyledFilterButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleModalOpen}\n              disabled={edited !== false}\n            >\n              Filter\n            </StyledFilterButton>\n            {activeFilter && (\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={edited !== false}\n                onClick={() =>\n                  Promise.resolve(getRows())\n                    .then((v) => setRowsData(v))\n                    .then(() => toggleFilter(false))\n                }\n              >\n                Clear filters\n              </Button>\n            )}\n          </TableCell>\n          <TablePagination\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ borderBottom: \"none\" }}\n          />\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n};\n\nexport default TableFooterC;\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { StyledEditButton } from \"../styled\";\n\nimport EditingCells from \"./EditingCells\";\n\nconst EditedRow = (props: any) => {\n  const { row, colsNames, saveData, clients } = props;\n  const [values, setValues] = useState(row);\n\n  const handleDateChange = (date: Date | null) => {\n    const month = (date!.getMonth() + 1).toString();\n    const year = date?.getFullYear();\n    const newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setValues({ ...values, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { name, value } = target;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell padding=\"checkbox\">\n        <Checkbox style={{ color: \"#5AA9E6\" }} disabled />\n      </TableCell>\n      <EditingCells\n        colsNames={colsNames}\n        values={values}\n        handleChange={handleChange}\n        clients={clients}\n        setValues={setValues}\n        handleDateChange={handleDateChange}\n        row={row}\n        type=\"table\"\n      />\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(values)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default EditedRow;\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nconst Spinner = () => (\n  <TableRow>\n    <TableCell colSpan={13}>\n      <CircularProgress size={50} style={{ margin: \"0 50%\" }} />\n    </TableCell>\n  </TableRow>\n);\n\nexport default Spinner;\n","import React, { useMemo } from \"react\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport _ from \"lodash\";\nimport {\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledEditButton,\n} from \"../styled\";\nimport EditedRow from \"../editedComponents/EditedRow\";\nimport { TypographyNoFilters } from \"../miscellaneous/typography\";\nimport Spinner from \"../miscellaneous/Spinner\";\n\nconst stableSort = (array: any[], orderBy: string, order: string): any[] => {\n  // @ts-ignore\n  const sorted = _.sortBy(array, (obj) =>\n    typeof obj[orderBy] === \"string\" ? obj[orderBy].toLowerCase() : obj[orderBy]\n  );\n  return order === \"asc\" ? sorted : sorted.reverse();\n};\n\nconst TableBodyC = (props: any) => {\n  const {\n    rows,\n    orderBy,\n    order,\n    page,\n    rowsPerPage,\n    edited,\n    setSelected,\n    selected,\n    columns,\n    setEdited,\n    setRowsData,\n    clients,\n    activeFilter,\n  } = props;\n\n  const colsNames = useMemo(() => columns.map((col: any) => col.field), [\n    columns,\n  ]);\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      const filtered = selected.filter((item: string) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleEditing = (rowData: any) => {\n    const newData = rows.map((row: any) => {\n      if (row.id === edited) {\n        return Object.keys(rowData).reduce((acc: any, key) => {\n          acc[key] = rowData[key] ? rowData[key] : row[key];\n          return acc;\n        }, {});\n      }\n      return row;\n    });\n    setRowsData(newData);\n    setEdited(false);\n  };\n\n  return (\n    <TableBody>\n      {rows.length ? (\n        stableSort(rows, orderBy, order)\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n          .map((row) => {\n            const isItemSelected = selected.indexOf(row.id) !== -1;\n            return edited !== row.id ? (\n              <StyledTableRow\n                key={row.id}\n                selected={selected.indexOf(row.id) !== -1}\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    style={{ color: \"#5AA9E6\" }}\n                    checked={isItemSelected}\n                    onClick={() => handleSelect(row.id)}\n                  />\n                </TableCell>\n                {colsNames.map((field: string) => {\n                  if (field === \"VALUE_1\" && row[field] > 2000) {\n                    return row[field] < 3000 ? (\n                      <StyledYellowCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledYellowCell>\n                    ) : (\n                      <StyledRedCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledRedCell>\n                    );\n                  }\n                  if (field === \"UPDATE_TIMESTAMP\") {\n                    /* temporary fix */\n                    return (\n                      <TableCell key={_.uniqueId()}>\n                        {row[field].toLocaleDateString()}{\" \"}\n                        {row[field].toLocaleTimeString()}\n                      </TableCell>\n                    );\n                  }\n                  return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n                })}\n                <TableCell key={row.id} padding=\"checkbox\">\n                  <StyledEditButton\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => setEdited(row.id)}\n                    disabled={edited !== false && edited !== row.id}\n                  >\n                    Edit\n                  </StyledEditButton>\n                </TableCell>\n              </StyledTableRow>\n            ) : (\n              <EditedRow\n                row={row}\n                colsNames={colsNames}\n                saveData={(data: any) => handleEditing(data)}\n                clients={clients}\n                key={row.id}\n              />\n            );\n          })\n      ) : activeFilter ? (\n        <TypographyNoFilters />\n      ) : (\n        <Spinner />\n      )}\n    </TableBody>\n  );\n};\n\nexport default TableBodyC;\n","import \"../App.css\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport { getRows, getColumns, Data, Config } from \"./data\";\nimport { useStyles } from \"./styled\";\nimport TableHeader from \"./table/TableHeader\";\nimport TableFooter from \"./table/TableFooter\";\nimport TableBody from \"./table/TableBody\";\n\nlet Order: \"asc\" | \"desc\";\n\nconst App = () => {\n  const classes = useStyles();\n  const [rows, setRowsData] = useState<Data[] | []>([]);\n  const [columns, setColumnsData] = useState<Config[] | []>([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(false);\n  const [activeFilter, toggleFilter] = React.useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      const cols = await getColumns();\n      setColumnsData(cols);\n      const rowData = await getRows();\n      setRowsData(rowData);\n    })();\n  }, []);\n\n  const clients = useMemo(\n    () => (rows as Data[]).map((row: Data) => row.CLIENT_NM),\n    [rows]\n  );\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size=\"small\"\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHeader\n              columns={columns}\n              rows={rows}\n              order={order}\n              orderBy={orderBy}\n              checkAll={checkAll}\n              checkedAll={checkedAll}\n              setOrder={setOrder}\n              setOrderBy={setOrderBy}\n              setSelected={setSelected}\n            />\n            <TableBody\n              rows={rows}\n              orderBy={orderBy}\n              order={order}\n              page={page}\n              rowsPerPage={rowsPerPage}\n              edited={edited}\n              selected={selected}\n              setEdited={setEdited}\n              columns={columns}\n              setRowsData={setRowsData}\n              clients={clients}\n              activeFilter={activeFilter}\n              setSelected={setSelected}\n            />\n          </Table>\n        </TableContainer>\n        <TableFooter\n          rows={rows}\n          rowsPerPage={rowsPerPage}\n          selected={selected}\n          edited={edited}\n          activeFilter={activeFilter}\n          getRows={getRows}\n          setRowsData={setRowsData}\n          toggleFilter={toggleFilter}\n          setRowsPerPage={setRowsPerPage}\n          page={page}\n          setPage={setPage}\n          clients={clients}\n        />\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./components/styled\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}