{"version":3,"sources":["data.tsx","styled.tsx","editedRow.tsx","modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","subtitle1","paddingBottom","createMuiTheme","palette","primary","main","StyledTableCell","withStyles","head","backgroundColor","color","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","StyledFilterButton","alignSelf","sourceMap","EditedRow","props","row","colsNames","saveData","clients","useState","values","setValues","Checkbox","style","disabled","handleChange","event","target","name","value","handleDateChange","date","month","getMonth","toString","year","getFullYear","newDate","padStart","TERMINATION_DT","type","variant","onClick","id","EditingCells","txtClasses","map","field","Typography","gutterBottom","className","TextField","defaultValue","size","InputProps","InputLabelProps","onChange","placeholder","select","SelectProps","native","source","Autocomplete","options","e","newValue","getOptionLabel","option","renderInput","params","utils","DateFnsUtils","ThemeProvider","DatePicker","openTo","views","Date","uniqueId","FilterModal","DESCRIPTION","SOURCE_NM","CLIENT_NM","VALUE_3","open","onClose","filters","setFilters","Dialog","aria-labelledby","PaperProps","DialogTitle","DialogContent","paddingLeft","DialogContentText","display","flexDirection","DialogActions","App","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","selected","setSelected","checkedAll","checkAll","edited","setEdited","filterModal","openFilterModal","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","headerName","sortable","push","cols","rowsData","items","item","str","slice","UPDATE_TIMESTAMP","toLocaleDateString","toLocaleTimeString","classes","col","Paper","TableContainer","component","Table","aria-label","TableHead","inputProps","checked","newSelected","n","handleSelectAllClick","column","sortDirection","active","direction","TableBody","array","sorted","sortBy","obj","toLowerCase","reverse","stableSort","isItemSelected","indexOf","includes","filtered","filter","handleSelect","rowData","newData","handleEditing","align","flexGrow","borderBottom","length","TablePagination","count","onChangeRowsPerPage","newRows","parseInt","onChangePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAMA,EAAQC,EAAQ,KAASC,QACzBC,EAAIF,EAAQ,I,6DCSLG,EAAYC,aAAW,SAACC,GAAD,MAAY,CAC9CC,KAAM,CACJC,MAAO,OACPC,SAAU,QAEZC,MAAO,CACLF,MAAO,OACPG,aAAcL,EAAMM,QAAQ,IAE9BC,MAAO,CACLC,SAAU,KAEZC,eAAgB,CACdC,OAAQ,EACRC,KAAM,gBACNC,OAAQ,EACRC,QAAS,EACTC,SAAU,SACVC,QAAS,EACTC,SAAU,WACVC,IAAK,GACLf,MAAO,GAETgB,UAAW,CACTC,cAAe,YAINnB,EAAQoB,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKCC,EAAkBC,aAAW,SAACzB,GAAD,MAAY,CACpD0B,KAAM,CACJC,gBAAiB3B,EAAMqB,QAAQC,QAAQC,KACvCK,MAAO5B,EAAMqB,QAAQQ,OAAOC,UAHDL,CAK3BM,KAESC,EAAiBP,aAAW,SAACzB,GAAD,MAAY,CACnDC,KAAM,CACJ,sBAAuB,CACrB0B,gBAAiB,WAEnB,uCAAwC,CACtCA,gBAAiB,eANOF,CAS1BQ,KAESC,EAAmBT,aAAW,SAACzB,GAAD,MAAY,CACrDmC,KAAM,CACJR,gBAAiB,cAFWF,CAI5BM,KAESK,EAAgBX,aAAW,SAACzB,GAAD,MAAY,CAClDmC,KAAM,CACJR,gBAAiB,cAFQF,CAIzBM,KAESM,EAAuBZ,aAAW,SAACzB,GAAD,MAAY,CACzDC,KAAM,CACJE,SAAU,OACV,mBAAoB,CAClByB,MAAO,SAET,6BAA8B,CAC5BA,MAAO,UAGXU,KAAM,CACJV,MAAO,yBAXyBH,CAahCc,KAESC,EAAmBf,aAAW,SAACzB,GAAD,MAAY,CACrDC,KAAM,CACJ2B,MAAO5B,EAAMqB,QAAQC,QAAQC,KAC7BI,gBAAiB,QACjBjB,OAAQ,oBACR,UAAW,CACTiB,gBAAiB,UACjBjB,OAAQ,yBAPkBe,CAU5BgB,KAESC,EAAqBjB,aAAW,SAACzB,GAAD,MAAY,CACvDC,KAAM,CACJ2B,MAAO,QACPe,UAAW,SACX,UAAW,CACThB,gBAAiB,eALWF,CAQ9BgB,K,sFCnGE5C,EAAIF,EAAQ,IAEZiD,EAAY,CAAC,MAAO,MAAO,QAEpBC,EAAY,SAACC,GAAgB,IAClCC,EAAsCD,EAAtCC,IAAKC,EAAiCF,EAAjCE,UAAWC,EAAsBH,EAAtBG,SAAUC,EAAYJ,EAAZI,QADO,EAEbC,mBAASJ,GAFI,mBAElCK,EAFkC,KAE1BC,EAF0B,KAiBvC,OACE,eAACpB,EAAA,EAAD,WACE,cAACF,EAAA,EAAD,CAAWhB,QAAQ,WAAnB,SACE,cAACuC,EAAA,EAAD,CAAUC,MAAO,CAAE3B,MAAO,WAAa4B,UAAQ,MAEjD,cAAC,EAAD,CACER,UAAWA,EACXI,OAAQA,EACRK,aAde,SAACC,GAAgD,IAC5DC,EAAWD,EAAXC,OACFC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACZR,EAAU,2BAAKD,GAAN,kBAAeQ,EAAOC,MAY3BX,QAASA,EACTG,UAAWA,EACXS,iBAxBmB,SAACC,GACxB,IAAIC,GAASD,EAAME,WAAa,GAAGC,WAC/BC,EAAI,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAMK,cACbC,EAAO,UAAMF,EAAN,YAAcH,EAAMM,SAAS,EAAG,MAC3CjB,EAAU,2BAAKD,GAAN,IAAcmB,eAAgBF,MAqBnCtB,IAAKA,EACLyB,KAAK,UAEP,cAACzC,EAAA,EAAD,CAAwBhB,QAAQ,WAAhC,SACE,cAACyB,EAAD,CACEiC,QAAQ,YACR7C,MAAM,UACN8C,QAAS,kBAAMzB,EAASG,IAH1B,mBADcL,EAAI4B,MAdP5B,EAAI4B,KA2BVC,EAAe,SAAC9B,GAAgB,IAEzCE,EAQEF,EARFE,UACAI,EAOEN,EAPFM,OACAK,EAMEX,EANFW,aACAP,EAKEJ,EALFI,QACAG,EAIEP,EAJFO,UACAS,EAGEhB,EAHFgB,iBACAf,EAEED,EAFFC,IACAyB,EACE1B,EADF0B,KAEIK,EAAa/E,IAEnB,OAAOkD,EAAU8B,KAAI,SAACC,GACpB,OAAQA,GACN,IAAK,cACH,OACE,eAAChD,EAAA,EAAD,WACY,SAATyC,GACC,cAACQ,EAAA,EAAD,CACEP,QAAQ,YACRQ,cAAY,EACZC,UAAWL,EAAW3D,UAHxB,+BASF,cAACiE,EAAA,EAAD,CACEC,aAAchC,EAAO2B,GACrBnB,KAAMmB,EACNM,KAAK,QACLV,GAAG,cACHpB,MAAO,CAAEpD,SAAU,OAAQD,MAAO,QAClCoF,WAAY,CAAE/B,MAAO,CAAEpD,SAAU,KACjCoF,gBAAiB,CAAEhC,MAAO,CAAEpD,SAAU,KACtCqF,SAAU/B,EAEVgC,YAAsB,SAATjB,EAAkB,eAAiB,OArBrC,UAyBnB,IAAK,YACH,OACE,eAACzC,EAAA,EAAD,WACY,SAATyC,GACC,cAACQ,EAAA,EAAD,CACEP,QAAQ,YACRQ,cAAY,EACZC,UAAWL,EAAW3D,UAHxB,qBAQF,cAACiE,EAAA,EAAD,CACER,GAAG,gBACHe,QAAM,EACNN,aAAchC,EAAO2B,GACrBnB,KAAMmB,EACNS,SAAU/B,EACV6B,WAAY,CAAE/B,MAAO,CAAEpD,SAAU,KACjCwF,YAAa,CACXC,QAAQ,GARZ,SAYY,SAATpB,EACG,CAAC,OAAD,OAAW5B,GAAWkC,KAAI,SAACe,GAAD,OACxB,wBAAqBhC,MAAOgC,EAA5B,SACGA,GADUA,MAIfjD,EAAUkC,KAAI,SAACe,GAAD,OACZ,wBAAqBhC,MAAOgC,EAA5B,SACGA,GADUA,UA7BR,UAoCnB,IAAK,YACH,OACE,eAAC9D,EAAA,EAAD,WACY,SAATyC,GACC,cAACQ,EAAA,EAAD,CACEP,QAAQ,YACRQ,cAAY,EACZC,UAAWL,EAAW3D,UAHxB,0BAQF,cAAC4E,EAAA,EAAD,CACEnB,GAAG,gBACHU,KAAK,QACLU,QAAS7C,EACTsC,SAAU,SAACQ,EAAGC,GAAJ,OACR5C,EAAU,2BAAKD,GAAN,kBAAe2B,EAAQkB,MAElCb,aAAchC,EAAO2B,GACrBmB,eAAgB,SAACC,GAAD,OAAoBA,GACpC5C,MAAO,CAAErD,MAAO,OAAQC,SAAU,IAClCiG,YAAa,SAACC,GAAD,OACX,cAAClB,EAAA,EAAD,2BACMkB,GADN,IAEE5B,QAAQ,WAERgB,YAAsB,SAATjB,EAAkB,MAAQ,WAzBhC,UA+BnB,IAAK,iBACH,OACE,eAACzC,EAAA,EAAD,WACY,SAATyC,GACC,cAACQ,EAAA,EAAD,CACEP,QAAQ,YACRQ,cAAY,EACZC,UAAWL,EAAW3D,UAHxB,+BAQF,cAAC,IAAD,CAAyBoF,MAAOC,IAAhC,SACE,cAACC,EAAA,EAAD,CAAexG,MAAOA,EAAtB,SACE,cAACyG,EAAA,EAAD,CACEhC,QAAQ,SACRiC,OAAO,OACP9C,KAAMmB,EACN4B,MAAO,CAAC,OAAQ,SAChB9C,MAAO,IAAI+C,KAAKxD,EAAO2B,IACvBS,SAAU1B,UAlBH,UAyBnB,IAAK,UACH,OACE,eAAC/B,EAAA,EAAD,WACY,SAATyC,GACC,cAACQ,EAAA,EAAD,CACEP,QAAQ,YACRQ,cAAY,EACZC,UAAWL,EAAW3D,UAHxB,wBAQF,cAACiE,EAAA,EAAD,CACER,GAAG,kBACHH,KAAK,SACLY,aAAchC,EAAO2B,GACrBO,WAAY,CACV/B,MAAO,CAAEpD,SAAU,KAErBoF,gBAAiB,CACfhC,MAAO,CAAEpD,SAAU,KAErByD,KAAMmB,EACNS,SAAU/B,EAEVgC,YAAsB,SAATjB,EAAkB,kBAAoB,OAvBxC,UA2BnB,QACE,OAAO,cAACzC,EAAA,EAAD,UAA+BgB,EAAIgC,IAAnBlF,EAAEgH,iB,6CC9NpBC,EAAc,SAAChE,GAC1B,IAAIC,EAAM,CACRgE,YAAa,GACbC,UAAW,GACXC,UAAW,GACX1C,eAAgB,UAChB2C,QAAS,MAEHC,EAA2BrE,EAA3BqE,KAAMC,EAAqBtE,EAArBsE,QAASlE,EAAYJ,EAAZI,QARkB,EASbC,mBAASJ,GATI,mBASpCsE,EAToC,KAS3BC,EAT2B,KA8BzC,OACE,eAACC,EAAA,EAAD,CACEJ,KAAMA,EACNC,QAASA,EACTI,kBAAgB,oBAChBC,WAAY,CACVlE,MAAO,CACLrD,MAAO,IACPa,QAAS,cAPf,UAWE,cAAC2G,EAAA,EAAD,CAAa/C,GAAG,oBAAoBpB,MAAO,CAAExC,QAAS,QAAtD,0BAGA,cAAC4G,EAAA,EAAD,CAAepE,MAAO,CAAEqE,YAAa,QAArC,SACE,cAACC,EAAA,EAAD,8CAEF,qBAAKtE,MAAO,CAAErD,MAAO,OAAQ4H,QAAS,OAAQC,cAAe,UAA7D,SACE,cAAC,EAAD,CACE/E,UAxCQ,CACd,cACA,YACA,YACA,iBACA,WAoCMI,OAAQiE,EACR5D,aA3Ba,SAACC,GAAgD,IAC5DC,EAAWD,EAAXC,OACFC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MACZyD,EAAW,2BAAKD,GAAN,kBAAgBzD,EAAOC,MAyB3BX,QAASA,EACTG,UAAWiE,EACXxD,iBArCiB,SAACC,GACxB,IAAIC,GAASD,EAAME,WAAa,GAAGC,WAC/BC,EAAI,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAMK,cACbC,EAAO,UAAMF,EAAN,YAAcH,EAAMM,SAAS,EAAG,MAC3CgD,EAAW,2BAAKD,GAAN,IAAe9C,eAAgBF,MAkCnCtB,IAAKA,EACLyB,KAAK,WAIT,eAACwD,EAAA,EAAD,WACE,cAACvF,EAAA,EAAD,CAAQiC,QAAS0C,EAASxF,MAAM,UAAhC,oBAGA,cAACa,EAAA,EAAD,CAAQiC,QAAS0C,EAASxF,MAAM,UAAhC,2B,yDC9CF/B,GAAIF,EAAQ,IAgPHsI,GA9OH,WACV,IADgB,EAGU9E,mBAAgB,IAH1B,mBAGX+E,EAHW,KAGLC,EAHK,OAIgBhF,mBAAgB,IAJhC,mBAIXiF,EAJW,KAIFC,EAJE,OAKMC,IAAMnF,SAAS,GALrB,mBAKXoF,EALW,KAKLC,EALK,OAMoBF,IAAMnF,SAAiB,GAN3C,mBAMXsF,EANW,KAMEC,EANF,OAOUJ,IAAMnF,SAAuB,OAPvC,mBAOTwF,EAPS,KAOFC,EAPE,OAQcN,IAAMnF,SAAS,MAR7B,mBAQT0F,EARS,KAQAC,EARA,OASgBR,IAAMnF,SAAmB,IATzC,mBAST4F,EATS,KASCC,EATD,QAUeV,IAAMnF,UAAkB,GAVvC,qBAUT8F,GAVS,MAUGC,GAVH,SAWYZ,IAAMnF,UAAyB,GAX3C,qBAWTgG,GAXS,MAWDC,GAXC,SAYuBd,IAAMnF,UAAkB,GAZ/C,qBAYTkG,GAZS,MAYIC,GAZJ,MAsBhBC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,sEJ3BH/J,EAAMgK,IACpB,gEAGsBC,MAAK,SAACC,GAAD,OAC3BC,OAAOC,KAAKF,EAASG,KAAKC,QAAQC,QAAO,SAACC,EAAiBC,GACzD,IAAIC,EAAQR,EAASG,KAAKC,OAAOG,GAAKC,MAClCL,EAAI,2BACHH,EAASG,KAAKC,OAAOG,IADlB,IAENpF,MAAOoF,EACPE,WAAYD,EACZE,UAAU,EACV3F,GAAI9E,EAAEgH,aAGR,OADAqD,EAAIK,KAAKR,GACFG,IACN,OIWc,OACXM,EADW,OAEfnC,EAAemC,GAFA,2CAAH,qDAIRC,EAAQ,uCAAG,4BAAAhB,EAAA,sEJrDH/J,EAAMgK,IACpB,gEAGmBC,MAAK,SAACC,GAAD,OACxBA,EAASG,KAAKW,MAAMT,QAAO,SAACC,EAAiBS,GAC3C,IAAIC,EAAMD,EAAI,iBAAqBE,MAAM,GAAI,GACzC9G,EAAO,IAAI6C,KAAKgE,GAEhBb,EAAI,2BACHY,GADG,IAENhG,GAAIgG,EAAI,GACRG,iBAAiB,GAAD,OAAK/G,EAAKgH,qBAAV,YAAkChH,EAAKiH,wBAGzD,OADAd,EAAIK,KAAKR,GACFG,IACN,OIqCc,OACXnH,EADW,OAEfoF,EAAYpF,GAFG,2CAAH,qDAIdyG,IACAiB,MACC,IAEH,IAmCMQ,GAAUnL,IAgBhB,IAaIkD,GAAYoF,EAAQtD,KAAI,SAACoG,GAAD,OAASA,EAAInG,SACrC7B,GAAUgF,EAAKpD,KAAI,SAAC/B,GAAD,OAASA,EAAG,aACnC,OACE,sBAAKmC,UAAW+F,GAAQhL,KAAxB,UACE,cAAC,EAAD,CACEiD,QAASA,GACTiE,KAAMkC,GACNjC,QAxFmB,WACvBkC,IAAgB,MAyFd,eAAC6B,GAAA,EAAD,CAAOjG,UAAW+F,GAAQ7K,MAA1B,UACE,cAACgL,EAAA,EAAD,CAAgBC,UAAWF,KAA3B,SACE,eAACG,EAAA,EAAD,CACEC,aAAW,eACXrG,UAAW+F,GAAQ1K,MACnB8E,KAAM,QACN9B,MAAO,CAAEpD,SAAU,QAJrB,UAME,cAACqL,GAAA,EAAD,UACE,eAACvJ,EAAA,EAAD,WACE,cAACT,EAAD,CAAiBT,QAAQ,WAAzB,SACE,cAACuC,EAAA,EAAD,CACEmI,WAAY,CAAE,aAAc,cAC5BlI,MAAO,CAAE3B,MAAO,SAChB8J,QAASzC,GACTvE,QAAS,kBAtFE,WAC3B,GAAKuE,GAKHC,IAAS,GACTF,EAAY,QANG,CACf,IAAM2C,EAAczD,EAAKpD,KAAI,SAAC8G,GAAD,OAAOA,EAAEjH,MACtCuE,IAAS,GACTF,EAAY2C,IAkFiBE,QAGlBzD,EAAQtD,KAAI,SAACgH,GAAD,OACX,cAACtK,EAAD,CAEEmD,GAAImH,EAAOnH,GACXzE,MAAO4L,EAAO5L,MACd6L,cAAelD,IAAYiD,EAAO/G,OAAQ4D,EAJ5C,SAME,cAACtG,EAAD,CACEsC,GAAImH,EAAOnH,GACXqH,OAAQnD,IAAYiD,EAAO/G,MAC3BkH,UAAWpD,IAAYiD,EAAO/G,MAAQ4D,EAAQ,MAC9CjE,QAAS,kBAlEFK,EAkE0B+G,EAAO/G,MAjE1D6D,EAAmB,QAAVD,EAAkB,OAAS,YACpCG,EAAW/D,GAFa,IAACA,GA8DT,SAMG+G,EAAO1B,SAXL0B,EAAOnH,OAehB,cAACnD,EAAD,CAAiBT,QAAQ,kBAG7B,cAACmL,EAAA,EAAD,UAtEV,SAAoBC,GAElB,IAAIC,EAASvM,GAAEwM,OAAOF,GAAO,SAAUG,GACrC,MAA+B,kBAAjBA,EAAIzD,GACdyD,EAAIzD,GAAS0D,cACbD,EAAIzD,MAEV,MAAiB,QAAVF,EAAkByD,EAASA,EAAOI,UAgE9BC,CAAWvE,GACT2C,MAAMtC,EAAOE,EAAaF,EAAOE,EAAcA,GAC/C3D,KAAI,SAAC/B,GACJ,IAnHI4B,EAmHE+H,GAnHF/H,EAmH8B5B,EAAI4B,IAnHO,IAA1BoE,EAAS4D,QAAQhI,IAoHpC,OAAOwE,KAAWpG,EAAI4B,GACpB,eAAC3C,EAAD,CAA6B+G,SAAU2D,EAAvC,UACE,cAAC3K,EAAA,EAAD,CAAWhB,QAAQ,WAAnB,SACE,cAACuC,EAAA,EAAD,CACEC,MAAO,CAAE3B,MAAO,WAChB8J,QAASgB,EACThI,QAAS,kBA7GZ,SAACC,GACpB,GAAIoE,EAAS6D,SAASjI,GAAK,CACzB,IAAIkI,EAAW9D,EAAS+D,QAAO,SAACnC,GAAD,OAAUA,IAAShG,KAClDqE,EAAY6D,QAEZ7D,EAAY,GAAD,mBAAKD,GAAL,CAAepE,KAwGSoI,CAAahK,EAAI4B,SAGnC3B,GAAU8B,KAAI,SAACC,GACd,MAAc,YAAVA,GAAuBhC,EAAIgC,GAAS,IAC/BhC,EAAIgC,GAAS,IAClB,cAAC7C,EAAD,UACGa,EAAIgC,IADgBlF,GAAEgH,YAIzB,cAACzE,EAAD,UACGW,EAAIgC,IADalF,GAAEgH,YAMtB,cAAC9E,EAAA,EAAD,UACGgB,EAAIgC,IADSlF,GAAEgH,eAMxB,cAAC9E,EAAA,EAAD,CAAwBhB,QAAQ,WAAhC,SACE,cAACyB,EAAD,CACEiC,QAAQ,WACR7C,MAAM,UACN8C,QAAS,kBAAM0E,GAAUrG,EAAI4B,KAC7BnB,UAAqB,IAAX2F,IAAoBA,KAAWpG,EAAI4B,GAJ/C,mBADc5B,EAAI4B,MA3BD5B,EAAI4B,IAuCzB,cAAC,EAAD,CACE5B,IAAKA,EACLC,UAAWA,GACXC,SAAU,SAAC8G,GAAD,OA5GR,SAACiD,GACrB,IAAIC,EAAU/E,EAAKpD,KAAI,SAAC/B,GACtB,OAAIA,EAAI4B,KAAOwE,GACNU,OAAOC,KAAKkD,GAAS/C,QAAO,SAACC,EAAUC,GAE5C,OADAD,EAAIC,GAAO6C,EAAQ7C,GAAO6C,EAAQ7C,GAAOpH,EAAIoH,GACtCD,IACN,IACSnH,KAEhBoF,EAAY8E,GACZ7D,IAAU,GAkGiC8D,CAAcnD,IACvC7G,QAASA,IACJH,EAAI4B,cAOvB,cAAC2G,EAAA,EAAD,UACE,cAACY,EAAA,EAAD,UACE,eAACjK,EAAA,EAAD,CAAUsB,MAAO,CAAEuE,QAAS,QAA5B,UACE,cAAC/F,EAAA,EAAD,CACEoL,MAAM,OACN5J,MAAO,CAAE6J,SAAU,EAAGC,aAAc,QAFtC,SAIGtE,EAASuE,OACc,IAApBvE,EAASuE,OAAT,4BAEKvE,EAASuE,OAFd,mBAGA,KAEN,cAAC5K,EAAD,CACE+B,QAAQ,YACR7C,MAAM,UACN8C,QA7MU,WACtB4E,IAAgB,IAyMN,oBAOA,cAACiE,GAAA,EAAD,CACEC,MAAOtF,EAAKoF,OACZ7E,YAAaA,EACbgF,oBAlKkB,SAACzH,GAC/B,IAAM0H,EAAU1H,EAAErC,OAAOE,MACzB6E,EAAeiF,SAASD,IACxBlF,EAAQ,IAgKID,KAAMA,EACNqF,aA3KW,SACvBlK,EACA6E,GAEAC,EAAQD,IAwKIhF,MAAO,CAAE8J,aAAc,wBCrPxBQ,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpE,MAAK,YAAkD,IAA/CqE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/H,EAAA,EAAD,CAAexG,MAAOA,EAAtB,SACE,cAAC,GAAD,QAGJwO,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.125396f2.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    response.data.items.reduce((acc: Array<any>, item: any) => {\n      let str = item[\"UPDATE_TIMESTAMP\"].slice(0, -7);\n      let date = new Date(str);\n\n      let data = {\n        ...item,\n        id: item[\"ID\"],\n        UPDATE_TIMESTAMP: `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import {\n  withStyles,\n  makeStyles,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  subtitle1: {\n    paddingBottom: \"15px\",\n  },\n}));\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#5AA9E6\",\n    },\n  },\n});\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n\nexport const StyledFilterButton = withStyles((theme) => ({\n  root: {\n    color: \"white\",\n    alignSelf: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"#5AA9E6\",\n    },\n  },\n}))(Button);\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { StyledEditButton, theme, useStyles } from \"./styled\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst _ = require(\"lodash\");\n\nconst sourceMap = [\"DEV\", \"UAT\", \"PROD\"];\n\nexport const EditedRow = (props: any) => {\n  let { row, colsNames, saveData, clients } = props;\n  let [values, setValues] = useState(row);\n\n  const handleDateChange = (date: Date | null) => {\n    let month = (date!.getMonth() + 1).toString();\n    let year = date?.getFullYear();\n    let newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setValues({ ...values, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    let { name, value } = target;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell padding=\"checkbox\">\n        <Checkbox style={{ color: \"#5AA9E6\" }} disabled />\n      </TableCell>\n      <EditingCells\n        colsNames={colsNames}\n        values={values}\n        handleChange={handleChange}\n        clients={clients}\n        setValues={setValues}\n        handleDateChange={handleDateChange}\n        row={row}\n        type=\"table\"\n      />\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(values)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport const EditingCells = (props: any) => {\n  let {\n    colsNames,\n    values,\n    handleChange,\n    clients,\n    setValues,\n    handleDateChange,\n    row,\n    type,\n  } = props;\n  const txtClasses = useStyles();\n\n  return colsNames.map((field: string) => {\n    switch (field) {\n      case \"DESCRIPTION\":\n        return (\n          <TableCell key=\"edit_1\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Item description:\n              </Typography>\n            )}\n\n            <TextField\n              defaultValue={values[field]}\n              name={field}\n              size=\"small\"\n              id=\"input-descr\"\n              style={{ fontSize: \"11px\", width: \"100%\" }}\n              InputProps={{ style: { fontSize: 14 } }}\n              InputLabelProps={{ style: { fontSize: 14 } }}\n              onChange={handleChange}\n              //label={type === \"form\" ? \"Item description\" : false}\n              placeholder={type === \"form\" ? \"Lorem ipsums\" : \"\"}\n            />\n          </TableCell>\n        );\n      case \"SOURCE_NM\":\n        return (\n          <TableCell key=\"edit_2\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Source:\n              </Typography>\n            )}\n            <TextField\n              id=\"select-source\"\n              select\n              defaultValue={values[field]}\n              name={field}\n              onChange={handleChange}\n              InputProps={{ style: { fontSize: 14 } }}\n              SelectProps={{\n                native: true,\n              }}\n              //label={type === \"form\" ? \"Source\" : false}\n            >\n              {type === \"form\"\n                ? [\"All\", ...sourceMap].map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))\n                : sourceMap.map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))}\n            </TextField>\n          </TableCell>\n        );\n      case \"CLIENT_NM\":\n        return (\n          <TableCell key=\"edit_3\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Client name:\n              </Typography>\n            )}\n            <Autocomplete\n              id=\"client-picker\"\n              size=\"small\"\n              options={clients}\n              onChange={(e, newValue) =>\n                setValues({ ...values, [field]: newValue })\n              }\n              defaultValue={values[field]}\n              getOptionLabel={(option: string) => option}\n              style={{ width: \"100%\", fontSize: 14 }}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  //label={type === \"form\" ? \"Client name\" : false}\n                  placeholder={type === \"form\" ? \"KOG\" : \"\"}\n                />\n              )}\n            />\n          </TableCell>\n        );\n      case \"TERMINATION_DT\":\n        return (\n          <TableCell key=\"edit_4\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Termination date:\n              </Typography>\n            )}\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <ThemeProvider theme={theme}>\n                <DatePicker\n                  variant=\"inline\"\n                  openTo=\"year\"\n                  name={field}\n                  views={[\"year\", \"month\"]}\n                  value={new Date(values[field])}\n                  onChange={handleDateChange}\n                  //label={type === \"form\" ? \"Termination date\" : false}\n                />\n              </ThemeProvider>\n            </MuiPickersUtilsProvider>\n          </TableCell>\n        );\n      case \"VALUE_3\":\n        return (\n          <TableCell key=\"edit_5\">\n            {type === \"form\" && (\n              <Typography\n                variant=\"subtitle1\"\n                gutterBottom\n                className={txtClasses.subtitle1}\n              >\n                Max range:\n              </Typography>\n            )}\n            <TextField\n              id=\"standard-number\"\n              type=\"number\"\n              defaultValue={values[field]}\n              InputProps={{\n                style: { fontSize: 14 },\n              }}\n              InputLabelProps={{\n                style: { fontSize: 14 },\n              }}\n              name={field}\n              onChange={handleChange}\n              //label={type === \"form\" ? \"Max range\" : false}\n              placeholder={type === \"form\" ? \"0 - 10000000000\" : \"\"}\n            />\n          </TableCell>\n        );\n      default:\n        return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n    }\n  });\n};\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { EditingCells } from \"./editedRow\";\n\nexport const FilterModal = (props: any) => {\n  let row = {\n    DESCRIPTION: \"\",\n    SOURCE_NM: \"\",\n    CLIENT_NM: \"\",\n    TERMINATION_DT: \"2017-04\",\n    VALUE_3: null,\n  };\n  const { open, onClose, clients } = props;\n  let [filters, setFilters] = useState(row);\n  let colsNames = [\n    \"DESCRIPTION\",\n    \"SOURCE_NM\",\n    \"CLIENT_NM\",\n    \"TERMINATION_DT\",\n    \"VALUE_3\",\n  ];\n\n  const handleDateChange = (date: Date | null) => {\n    let month = (date!.getMonth() + 1).toString();\n    let year = date?.getFullYear();\n    let newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setFilters({ ...filters, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    let { name, value } = target;\n    setFilters({ ...filters, [name]: value });\n  };\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n      PaperProps={{\n        style: {\n          width: 600,\n          padding: \"20px 30px\",\n        },\n      }}\n    >\n      <DialogTitle id=\"form-dialog-title\" style={{ padding: \"15px\" }}>\n        Data filters\n      </DialogTitle>\n      <DialogContent style={{ paddingLeft: \"15px\" }}>\n        <DialogContentText>Choose fields to filter rows:</DialogContentText>\n      </DialogContent>\n      <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <EditingCells\n          colsNames={colsNames}\n          values={filters}\n          handleChange={handleChange}\n          clients={clients}\n          setValues={setFilters}\n          handleDateChange={handleDateChange}\n          row={row}\n          type=\"form\"\n        />\n      </div>\n\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={onClose} color=\"primary\">\n          Filter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledTableSortLabel,\n  useStyles,\n  StyledEditButton,\n  StyledFilterButton,\n} from \"./styled\";\nimport { EditedRow } from \"./editedRow\";\nimport { FilterModal } from \"./modal\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Button from \"@material-ui/core/Button\";\n\nconst _ = require(\"lodash\");\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState<number>(5);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(false);\n  const [filterModal, openFilterModal] = React.useState<boolean>(false);\n\n  const handleModalOpen = () => {\n    openFilterModal(true);\n  };\n\n  const handleModalClose = () => {\n    openFilterModal(false);\n  };\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows));\n    setPage(0);\n  };\n\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return typeof obj[orderBy] === \"string\"\n        ? obj[orderBy].toLowerCase()\n        : obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  const handleEditing = (rowData: any) => {\n    let newData = rows.map((row) => {\n      if (row.id === edited) {\n        return Object.keys(rowData).reduce((acc: any, key) => {\n          acc[key] = rowData[key] ? rowData[key] : row[key];\n          return acc;\n        }, {});\n      } else return row;\n    });\n    setRowsData(newData);\n    setEdited(false);\n  };\n\n  let colsNames = columns.map((col) => col.field);\n  let clients = rows.map((row) => row[\"CLIENT_NM\"]);\n  return (\n    <div className={classes.root}>\n      <FilterModal\n        clients={clients}\n        open={filterModal}\n        onClose={handleModalClose}\n      />\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all\" }}\n                    style={{ color: \"white\" }}\n                    checked={checkedAll}\n                    onClick={() => handleSelectAllClick()}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.field ? order : false}\n                  >\n                    <StyledTableSortLabel\n                      id={column.id}\n                      active={orderBy === column.field}\n                      direction={orderBy === column.field ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </StyledTableSortLabel>\n                  </StyledTableCell>\n                ))}\n                <StyledTableCell padding=\"checkbox\"></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  const isItemSelected = isSelected(row.id);\n                  return edited !== row.id ? (\n                    <StyledTableRow key={row.id} selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          style={{ color: \"#5AA9E6\" }}\n                          checked={isItemSelected}\n                          onClick={() => handleSelect(row.id)}\n                        />\n                      </TableCell>\n                      {colsNames.map((field) => {\n                        if (field === \"VALUE_1\" && row[field] > 2000) {\n                          return row[field] < 3000 ? (\n                            <StyledYellowCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledYellowCell>\n                          ) : (\n                            <StyledRedCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledRedCell>\n                          );\n                        } else {\n                          return (\n                            <TableCell key={_.uniqueId()}>\n                              {row[field]}\n                            </TableCell>\n                          );\n                        }\n                      })}\n                      <TableCell key={row.id} padding=\"checkbox\">\n                        <StyledEditButton\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => setEdited(row.id)}\n                          disabled={edited !== false && edited !== row.id}\n                        >\n                          Edit\n                        </StyledEditButton>\n                      </TableCell>\n                    </StyledTableRow>\n                  ) : (\n                    <EditedRow\n                      row={row}\n                      colsNames={colsNames}\n                      saveData={(data: any) => handleEditing(data)}\n                      clients={clients}\n                      key={row.id}\n                    ></EditedRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <Table>\n          <TableBody>\n            <TableRow style={{ display: \"flex\" }}>\n              <TableCell\n                align=\"left\"\n                style={{ flexGrow: 1, borderBottom: \"none\" }}\n              >\n                {selected.length\n                  ? selected.length === 1\n                    ? `1 item selected`\n                    : `${selected.length} items selected`\n                  : \"\"}\n              </TableCell>\n              <StyledFilterButton\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleModalOpen}\n              >\n                Filter\n              </StyledFilterButton>\n              <TablePagination\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                style={{ borderBottom: \"none\" }}\n              />\n            </TableRow>\n          </TableBody>\n        </Table>\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./styled\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}