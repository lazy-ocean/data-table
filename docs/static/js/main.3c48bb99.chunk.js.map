{"version":3,"sources":["data.tsx","styled.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","StyledTableCell","withStyles","theme","head","backgroundColor","color","palette","common","white","body","fontSize","TableCell","StyledTableRow","root","TableRow","StyledYellowCell","StyledRedCell","App","useState","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","order","setOrder","orderBy","setOrderBy","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","field","headerName","sortable","id","uniqueId","push","cols","rowsData","items","row","classes","makeStyles","width","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","useStyles","colsNames","map","col","className","Paper","TableContainer","component","Table","aria-label","size","TableHead","Checkbox","inputProps","column","sortDirection","TableSortLabel","active","direction","onClick","TableBody","array","sorted","sortBy","obj","reverse","stableSort","slice","console","log","TablePagination","count","length","onChangePage","event","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c48bb99.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    Object.keys(response.data.items).reduce((acc: Array<any>, key) => {\n      let data = {\n        ...response.data.items[key],\n        id: response.data.items[key][\"ID\"],\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#5AA9E6\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n} from \"./styled\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nconst _ = require(\"lodash\");\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"#\");\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: \"100%\",\n    },\n    paper: {\n      width: \"100%\",\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: \"rect(0 0 0 0)\",\n      height: 1,\n      margin: -1,\n      overflow: \"hidden\",\n      padding: 0,\n      position: \"absolute\",\n      top: 20,\n      width: 1,\n    },\n  }));\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    const isAsc = orderBy === field && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  let colsNames = columns.map((col) => col.field);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all desserts\" }}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.id ? order : false}\n                  >\n                    <TableSortLabel\n                      id={column.id}\n                      active={orderBy === column.id}\n                      direction={orderBy === column.id ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </TableSortLabel>\n                  </StyledTableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => (\n                  <StyledTableRow key={row.id}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox />\n                    </TableCell>\n                    {colsNames.map((field) => {\n                      if (field === \"VALUE_1\" && row[field] > 2000) {\n                        console.log(row[field]);\n                        return row[field] < 3000 ? (\n                          <StyledYellowCell>{row[field]}</StyledYellowCell>\n                        ) : (\n                          <StyledRedCell>{row[field]}</StyledRedCell>\n                        );\n                      } else {\n                        return <TableCell>{row[field]}</TableCell>;\n                      }\n                    })}\n                  </StyledTableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n        />\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}