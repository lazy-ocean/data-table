{"version":3,"sources":["data.tsx","styled.tsx","editedRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","StyledTableCell","withStyles","head","backgroundColor","color","palette","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","sourceMap","EditedRow","props","row","colsNames","saveData","clients","useState","values","setValues","handleDateChange","date","month","getMonth","toString","year","getFullYear","newDate","padStart","TERMINATION_DT","handleChange","event","target","name","value","Checkbox","style","disabled","map","field","TextField","defaultValue","size","id","InputProps","InputLabelProps","onChange","select","SelectProps","native","source","Autocomplete","options","e","newValue","getOptionLabel","option","renderInput","params","variant","utils","DateFnsUtils","DatePicker","openTo","views","Date","type","shrink","uniqueId","onClick","App","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","selected","setSelected","checkedAll","checkAll","edited","setEdited","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","headerName","sortable","push","cols","rowsData","items","item","str","slice","UPDATE_TIMESTAMP","toLocaleDateString","toLocaleTimeString","classes","col","className","Paper","TableContainer","component","Table","aria-label","TableHead","inputProps","checked","newSelected","n","handleSelectAllClick","column","sortDirection","active","direction","TableBody","array","sorted","sortBy","obj","toLowerCase","reverse","stableSort","isItemSelected","indexOf","includes","filtered","filter","handleSelect","rowData","newData","handleEditing","display","justifyContent","length","align","TablePagination","count","onChangeRowsPerPage","newRows","parseInt","onChangePage","flexGrow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.630bbd82.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    response.data.items.reduce((acc: Array<any>, item: any) => {\n      let str = item[\"UPDATE_TIMESTAMP\"].slice(0, -7);\n      let date = new Date(str);\n\n      let data = {\n        ...item,\n        id: item[\"ID\"],\n        UPDATE_TIMESTAMP: `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#5AA9E6\",\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles((theme) => ({\n  root: {\n    color: \"#5AA9E6\",\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport { StyledEditButton } from \"./styled\";\nconst _ = require(\"lodash\");\n\nconst sourceMap = [\"DEV\", \"UAT\", \"PROD\"];\n\nexport const EditedRow = (props: any) => {\n  let { row, colsNames, saveData, clients } = props;\n  let [values, setValues] = useState(row);\n\n  const handleDateChange = (date: Date | null) => {\n    let month = (date!.getMonth() + 1).toString();\n    let year = date?.getFullYear();\n    let newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setValues({ ...values, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { name, value } = target;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell padding=\"checkbox\">\n        <Checkbox style={{ color: \"#5AA9E6\" }} disabled />\n      </TableCell>\n      {colsNames.map((field: string) => {\n        switch (field) {\n          case \"DESCRIPTION\":\n            return (\n              <TableCell key=\"edit_1\">\n                <TextField\n                  defaultValue={values[field]}\n                  name={field}\n                  size=\"small\"\n                  id=\"input-descr\"\n                  style={{ fontSize: \"11px\" }}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  InputLabelProps={{ style: { fontSize: 14 } }}\n                  onChange={handleChange}\n                />\n              </TableCell>\n            );\n          case \"SOURCE_NM\":\n            return (\n              <TableCell key=\"edit_2\">\n                <TextField\n                  id=\"select-source\"\n                  select\n                  defaultValue={values[field]}\n                  name={field}\n                  onChange={handleChange}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  SelectProps={{\n                    native: true,\n                  }}\n                >\n                  {sourceMap.map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))}\n                </TextField>\n              </TableCell>\n            );\n          case \"CLIENT_NM\":\n            return (\n              <TableCell key=\"edit_3\">\n                <Autocomplete\n                  id=\"client-picker\"\n                  size=\"small\"\n                  options={clients}\n                  onChange={(e, newValue) =>\n                    setValues({ ...values, [field]: newValue })\n                  }\n                  defaultValue={values[field]}\n                  getOptionLabel={(option: string) => option}\n                  style={{ width: 100, fontSize: 14 }}\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" />\n                  )}\n                />\n              </TableCell>\n            );\n          case \"TERMINATION_DT\":\n            return (\n              <TableCell key=\"edit_4\">\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    variant=\"inline\"\n                    openTo=\"year\"\n                    name={field}\n                    views={[\"year\", \"month\"]}\n                    value={new Date(values[field])}\n                    onChange={handleDateChange}\n                  />\n                </MuiPickersUtilsProvider>\n              </TableCell>\n            );\n          case \"VALUE_3\":\n            return (\n              <TableCell key=\"edit_5\">\n                <TextField\n                  id=\"standard-number\"\n                  type=\"number\"\n                  defaultValue={values[field]}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  InputLabelProps={{\n                    shrink: true,\n                    style: { fontSize: 14 },\n                  }}\n                  name={field}\n                  onChange={handleChange}\n                />\n              </TableCell>\n            );\n          default:\n            return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n        }\n      })}\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(values)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledTableSortLabel,\n  useStyles,\n  StyledEditButton,\n} from \"./styled\";\nimport { EditedRow } from \"./editedRow\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nconst _ = require(\"lodash\");\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState<number>(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(false);\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows));\n    setPage(0);\n  };\n\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return typeof obj[orderBy] === \"string\"\n        ? obj[orderBy].toLowerCase()\n        : obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  const handleEditing = (rowData: any) => {\n    let newData = rows.map((row) => (row.id === edited ? rowData : row));\n    setRowsData(newData);\n    setEdited(false);\n  };\n\n  let colsNames = columns.map((col) => col.field);\n  let clients = rows.map((row) => row[\"CLIENT_NM\"]);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all\" }}\n                    style={{ color: \"white\" }}\n                    checked={checkedAll}\n                    onClick={() => handleSelectAllClick()}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.field ? order : false}\n                  >\n                    <StyledTableSortLabel\n                      id={column.id}\n                      active={orderBy === column.field}\n                      direction={orderBy === column.field ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </StyledTableSortLabel>\n                  </StyledTableCell>\n                ))}\n                <StyledTableCell padding=\"checkbox\"></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  const isItemSelected = isSelected(row.id);\n                  return edited !== row.id ? (\n                    <StyledTableRow key={row.id} selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          style={{ color: \"#5AA9E6\" }}\n                          checked={isItemSelected}\n                          onClick={() => handleSelect(row.id)}\n                        />\n                      </TableCell>\n                      {colsNames.map((field) => {\n                        if (field === \"VALUE_1\" && row[field] > 2000) {\n                          return row[field] < 3000 ? (\n                            <StyledYellowCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledYellowCell>\n                          ) : (\n                            <StyledRedCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledRedCell>\n                          );\n                        } else {\n                          return (\n                            <TableCell key={_.uniqueId()}>\n                              {row[field]}\n                            </TableCell>\n                          );\n                        }\n                      })}\n                      <TableCell key={row.id} padding=\"checkbox\">\n                        <StyledEditButton\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => setEdited(row.id)}\n                          disabled={edited !== false && edited !== row.id}\n                        >\n                          Edit\n                        </StyledEditButton>\n                      </TableCell>\n                    </StyledTableRow>\n                  ) : (\n                    <EditedRow\n                      row={row}\n                      colsNames={colsNames}\n                      saveData={(data: any) => handleEditing(data)}\n                      clients={clients}\n                      key={row.id}\n                    ></EditedRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TableRow style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          {selected.length ? (\n            <TableCell align=\"right\">\n              {selected.length === 1\n                ? `1 item selected`\n                : `${selected.length} items selected`}\n            </TableCell>\n          ) : null}\n          <TablePagination\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ flexGrow: 1 }}\n          />\n        </TableRow>\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}