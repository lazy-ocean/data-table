{"version":3,"sources":["data.tsx","styled.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","StyledTableCell","withStyles","theme","head","backgroundColor","color","palette","common","white","body","fontSize","TableCell","StyledTableRow","root","TableRow","StyledYellowCell","StyledRedCell","App","useState","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","order","setOrder","orderBy","setOrderBy","selected","setSelected","checkedAll","checkAll","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","field","headerName","sortable","id","uniqueId","push","cols","rowsData","items","row","classes","makeStyles","width","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","useStyles","colsNames","map","col","className","Paper","TableContainer","component","Table","aria-label","size","TableHead","Checkbox","inputProps","style","checked","onClick","newSelected","n","handleSelectAllClick","column","sortDirection","TableSortLabel","active","direction","TableBody","array","sorted","sortBy","obj","reverse","stableSort","slice","isItemSelected","indexOf","includes","filtered","filter","item","handleSelect","display","justifyContent","length","align","TablePagination","count","onChangePage","event","flexGrow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9afd282.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    Object.keys(response.data.items).reduce((acc: Array<any>, key) => {\n      let data = {\n        ...response.data.items[key],\n        id: response.data.items[key][\"ID\"],\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#5AA9E6\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n} from \"./styled\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nconst _ = require(\"lodash\");\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"#\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: \"100%\",\n    },\n    paper: {\n      width: \"100%\",\n      marginBottom: theme.spacing(2),\n    },\n    table: {\n      minWidth: 750,\n    },\n    visuallyHidden: {\n      border: 0,\n      clip: \"rect(0 0 0 0)\",\n      height: 1,\n      margin: -1,\n      overflow: \"hidden\",\n      padding: 0,\n      position: \"absolute\",\n      top: 20,\n      width: 1,\n    },\n  }));\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    const isAsc = orderBy === field && order === \"asc\";\n    setOrder(isAsc ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  let colsNames = columns.map((col) => col.field);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all\" }}\n                    style={{ color: \"white\" }}\n                    checked={checkedAll}\n                    onClick={() => handleSelectAllClick()}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.id ? order : false}\n                  >\n                    <TableSortLabel\n                      id={column.id}\n                      active={orderBy === column.id}\n                      direction={orderBy === column.id ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </TableSortLabel>\n                  </StyledTableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  const isItemSelected = isSelected(row.id);\n                  return (\n                    <StyledTableRow key={row.id} selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          style={{ color: \"#5AA9E6\" }}\n                          checked={isItemSelected}\n                          onClick={() => handleSelect(row.id)}\n                        />\n                      </TableCell>\n                      {colsNames.map((field) => {\n                        if (field === \"VALUE_1\" && row[field] > 2000) {\n                          return row[field] < 3000 ? (\n                            <StyledYellowCell>{row[field]}</StyledYellowCell>\n                          ) : (\n                            <StyledRedCell>{row[field]}</StyledRedCell>\n                          );\n                        } else {\n                          return <TableCell>{row[field]}</TableCell>;\n                        }\n                      })}\n                    </StyledTableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TableRow style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          {selected.length ? (\n            <TableCell align=\"right\">\n              {selected.length === 1\n                ? `1 item selected`\n                : `${selected.length} items selected`}\n            </TableCell>\n          ) : null}\n          <TablePagination\n            component=\"div\"\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ flexGrow: 1 }}\n          />\n        </TableRow>\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}