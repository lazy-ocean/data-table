{"version":3,"sources":["data.tsx","styled.tsx","editedRow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","_","useStyles","makeStyles","theme","root","width","fontSize","paper","marginBottom","spacing","table","minWidth","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","StyledTableCell","withStyles","head","backgroundColor","color","palette","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","sourceMap","EditedRow","props","row","colsNames","saveData","clients","useState","date","setDate","handleDateChange","Checkbox","style","disabled","map","field","TextField","defaultValue","size","id","InputProps","InputLabelProps","uniqueId","select","SelectProps","native","source","value","Autocomplete","options","getOptionLabel","option","renderInput","params","variant","utils","DateFnsUtils","DatePicker","openTo","views","onChange","type","shrink","onClick","App","rows","setRowsData","columns","setColumnsData","React","page","setPage","rowsPerPage","setRowsPerPage","order","setOrder","orderBy","setOrderBy","selected","setSelected","checkedAll","checkAll","edited","setEdited","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","headerName","sortable","push","cols","rowsData","items","item","str","slice","Date","UPDATE_TIMESTAMP","toLocaleDateString","toLocaleTimeString","classes","col","className","Paper","TableContainer","component","Table","aria-label","TableHead","inputProps","checked","newSelected","n","handleSelectAllClick","column","sortDirection","active","direction","TableBody","array","sorted","sortBy","obj","toLowerCase","reverse","stableSort","isItemSelected","indexOf","includes","filtered","filter","handleSelect","display","justifyContent","length","align","TablePagination","count","onChangeRowsPerPage","e","newRows","target","parseInt","onChangePage","event","flexGrow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd27495f.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\nconst _ = require(\"lodash\");\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    response.data.items.reduce((acc: Array<any>, item: any) => {\n      let str = item[\"UPDATE_TIMESTAMP\"].slice(0, -7);\n      let date = new Date(str);\n\n      let data = {\n        ...item,\n        id: item[\"ID\"],\n        UPDATE_TIMESTAMP: `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`,\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n        id: _.uniqueId(),\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport const StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#5AA9E6\",\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles((theme) => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles((theme) => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles((theme) => ({\n  root: {\n    color: \"#5AA9E6\",\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport { StyledEditButton } from \"./styled\";\nconst _ = require(\"lodash\");\n\nconst sourceMap = [\"DEV\", \"UAT\", \"PROD\"];\n\nexport const EditedRow = (props: any) => {\n  let { row, colsNames, saveData, clients } = props;\n  let [source, setSource] = useState<string>(row[\"SOURCE_NM\"]);\n  let [date, setDate] = useState<Date | null>(null);\n\n  const handleDateChange = (date: Date | null) => {\n    setDate(date);\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell padding=\"checkbox\">\n        <Checkbox style={{ color: \"#5AA9E6\" }} disabled />\n      </TableCell>\n      {colsNames.map((field: string) => {\n        switch (field) {\n          case \"DESCRIPTION\":\n            return (\n              <TableCell key={_.uniqueId()}>\n                <TextField\n                  defaultValue={row[field]}\n                  size=\"small\"\n                  id=\"input-descr\"\n                  style={{ fontSize: \"11px\" }}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  InputLabelProps={{ style: { fontSize: 14 } }}\n                />\n              </TableCell>\n            );\n          case \"SOURCE_NM\":\n            return (\n              <TableCell key={_.uniqueId()}>\n                <TextField\n                  id=\"select-source\"\n                  select\n                  defaultValue={row[field]}\n                  //onChange={() => setSource()}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  SelectProps={{\n                    native: true,\n                  }}\n                >\n                  {sourceMap.map((source) => (\n                    <option key={source} value={source}>\n                      {source}\n                    </option>\n                  ))}\n                </TextField>\n              </TableCell>\n            );\n          case \"CLIENT_NM\":\n            return (\n              <TableCell key={_.uniqueId()}>\n                <Autocomplete\n                  id=\"client-picker\"\n                  size=\"small\"\n                  options={clients}\n                  getOptionLabel={(option: string) => option}\n                  style={{ width: 100, fontSize: 14 }}\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" />\n                  )}\n                />\n              </TableCell>\n            );\n          case \"TERMINATION_DT\":\n            return (\n              <TableCell key={_.uniqueId()}>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    variant=\"inline\"\n                    openTo=\"year\"\n                    views={[\"year\", \"month\"]}\n                    value={date}\n                    onChange={handleDateChange}\n                  />\n                </MuiPickersUtilsProvider>\n              </TableCell>\n            );\n          case \"VALUE_3\":\n            return (\n              <TableCell key={_.uniqueId()}>\n                <TextField\n                  id=\"standard-number\"\n                  type=\"number\"\n                  defaultValue={row[field]}\n                  InputProps={{ style: { fontSize: 14 } }}\n                  InputLabelProps={{\n                    shrink: true,\n                    style: { fontSize: 14 },\n                  }}\n                />\n              </TableCell>\n            );\n          default:\n            return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n        }\n      })}\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(row.id)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n","import \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\nimport {\n  StyledTableCell,\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledTableSortLabel,\n  useStyles,\n  StyledEditButton,\n} from \"./styled\";\nimport { EditedRow } from \"./editedRow\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Button from \"@material-ui/core/Button\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nconst _ = require(\"lodash\");\n\nconst App = () => {\n  let Order: \"asc\" | \"desc\";\n\n  let [rows, setRowsData] = useState<any[]>([]);\n  let [columns, setColumnsData] = useState<any[]>([]);\n  let [page, setPage] = React.useState(0);\n  let [rowsPerPage, setRowsPerPage] = React.useState<number>(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(\n    \"5ee3acd9807b3b1dd49f5725\"\n  );\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  const isSelected = (id: string) => selected.indexOf(id) !== -1;\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      let filtered = selected.filter((item) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows));\n    setPage(0);\n  };\n\n  const classes = useStyles();\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  function stableSort(array: any[]): any[] {\n    // @ts-ignore\n    let sorted = _.sortBy(array, function (obj) {\n      return typeof obj[orderBy] === \"string\"\n        ? obj[orderBy].toLowerCase()\n        : obj[orderBy];\n    });\n    return order === \"asc\" ? sorted : sorted.reverse();\n  }\n\n  let colsNames = columns.map((col) => col.field);\n  let clients = rows.map((row) => row[\"CLIENT_NM\"]);\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer component={Paper}>\n          <Table\n            aria-label=\"simple table\"\n            className={classes.table}\n            size={\"small\"}\n            style={{ fontSize: \"10px\" }}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell padding=\"checkbox\">\n                  <Checkbox\n                    inputProps={{ \"aria-label\": \"select all\" }}\n                    style={{ color: \"white\" }}\n                    checked={checkedAll}\n                    onClick={() => handleSelectAllClick()}\n                  />\n                </StyledTableCell>\n                {columns.map((column) => (\n                  <StyledTableCell\n                    key={column.id}\n                    id={column.id}\n                    width={column.width}\n                    sortDirection={orderBy === column.field ? order : false}\n                  >\n                    <StyledTableSortLabel\n                      id={column.id}\n                      active={orderBy === column.field}\n                      direction={orderBy === column.field ? order : \"asc\"}\n                      onClick={() => handleRequestSort(column.field)}\n                    >\n                      {column.label}\n                    </StyledTableSortLabel>\n                  </StyledTableCell>\n                ))}\n                <StyledTableCell padding=\"checkbox\"></StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {stableSort(rows)\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => {\n                  const isItemSelected = isSelected(row.id);\n                  return edited !== row.id ? (\n                    <StyledTableRow key={row.id} selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          style={{ color: \"#5AA9E6\" }}\n                          checked={isItemSelected}\n                          onClick={() => handleSelect(row.id)}\n                        />\n                      </TableCell>\n                      {colsNames.map((field) => {\n                        if (field === \"VALUE_1\" && row[field] > 2000) {\n                          return row[field] < 3000 ? (\n                            <StyledYellowCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledYellowCell>\n                          ) : (\n                            <StyledRedCell key={_.uniqueId()}>\n                              {row[field]}\n                            </StyledRedCell>\n                          );\n                        } else {\n                          return (\n                            <TableCell key={_.uniqueId()}>\n                              {row[field]}\n                            </TableCell>\n                          );\n                        }\n                      })}\n                      <TableCell key={row.id} padding=\"checkbox\">\n                        <StyledEditButton\n                          variant=\"outlined\"\n                          color=\"primary\"\n                          onClick={() => setEdited(row.id)}\n                          disabled={edited !== false && edited !== row.id}\n                        >\n                          Edit\n                        </StyledEditButton>\n                      </TableCell>\n                    </StyledTableRow>\n                  ) : (\n                    <EditedRow\n                      row={row}\n                      colsNames={colsNames}\n                      saveData={() => setEdited(false)}\n                      clients={clients}\n                    ></EditedRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TableRow style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          {selected.length ? (\n            <TableCell align=\"right\">\n              {selected.length === 1\n                ? `1 item selected`\n                : `${selected.length} items selected`}\n            </TableCell>\n          ) : null}\n          <TablePagination\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ flexGrow: 1 }}\n          />\n        </TableRow>\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}