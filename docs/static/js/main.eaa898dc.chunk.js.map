{"version":3,"sources":["data.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","require","default","App","useState","rows","setRowsData","columns","setColumnsData","useEffect","colsData","a","get","then","response","Object","keys","data","config","reduce","acc","key","label","field","headerName","sortable","push","cols","console","log","rowsData","items","id","row","className","style","height","width","pageSize","checkboxSelection","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAMA,EAAQC,EAAQ,KAASC,Q,QCgChBC,EA1BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACXC,EADW,KACLC,EADK,OAEgBF,mBAAS,IAFzB,mBAEXG,EAFW,KAEFC,EAFE,KAmBhB,OAfAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,sEDUHX,EAAMY,IACpB,gEAGsBC,MAAK,SAACC,GAAD,OAC3BC,OAAOC,KAAKF,EAASG,KAAKC,QAAQC,QAAO,SAACC,EAAiBC,GACzD,IAAIC,EAAQR,EAASG,KAAKC,OAAOG,GAAKC,MAClCL,EAAI,2BACHH,EAASG,KAAKC,OAAOG,IADlB,IAENE,MAAOF,EACPG,WAAYF,EACZG,UAAU,IAGZ,OADAL,EAAIM,KAAKT,GACFG,IACN,OCzBc,OACXO,EADW,OAEfC,QAAQC,IAAIF,GACZnB,EAAemB,GAHA,2CAAH,qDAKRG,EAAQ,uCAAG,4BAAAnB,EAAA,sEDbHX,EAAMY,IACpB,gEAGmBC,MAAK,SAACC,GAAD,OACxBC,OAAOC,KAAKF,EAASG,KAAKc,OAAOZ,QAAO,SAACC,EAAiBC,GACxD,IAAIJ,EAAI,2BACHH,EAASG,KAAKc,MAAMV,IADjB,IAENW,GAAIlB,EAASG,KAAKc,MAAMV,GAApB,KAGN,OADAD,EAAIM,KAAKT,GACFG,IACN,OCCc,OACXa,EADW,OAEfL,QAAQC,IAAII,GACZ3B,EAAY2B,GAHG,2CAAH,qDAKdvB,IACAoB,MACC,IAGD,qBAAKI,UAAU,MAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAAlD,SACE,cAAC,IAAD,CAAUhC,KAAMA,EAAME,QAASA,EAAS+B,SAAU,GAAIC,mBAAiB,OCb9DC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.eaa898dc.chunk.js","sourcesContent":["const axios = require(\"axios\").default;\n\nexport const getRows = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\"\n  );\n  //const rows = promise.then((response: any) => response.data.items);\n  const rows = promise.then((response: any) =>\n    Object.keys(response.data.items).reduce((acc: Array<any>, key) => {\n      let data = {\n        ...response.data.items[key],\n        id: response.data.items[key][\"ID\"],\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n  return rows;\n};\n\nexport const getColumns = (): Promise<any> => {\n  const promise = axios.get(\n    \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\"\n  );\n  //const columns = promise.then((response: any) => response.data.config);\n  const columns = promise.then((response: any) =>\n    Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n      let label = response.data.config[key].label;\n      let data = {\n        ...response.data.config[key],\n        field: key,\n        headerName: label,\n        sortable: true,\n      };\n      acc.push(data);\n      return acc;\n    }, [])\n  );\n\n  return columns;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport \"./App.css\";\nimport { getRows, getColumns } from \"./data\";\n\nconst App = () => {\n  let [rows, setRowsData] = useState([]);\n  let [columns, setColumnsData] = useState([]);\n\n  useEffect(() => {\n    const colsData = async () => {\n      let cols = await getColumns();\n      console.log(cols);\n      setColumnsData(cols);\n    };\n    const rowsData = async () => {\n      let row = await getRows();\n      console.log(row);\n      setRowsData(row);\n    };\n    colsData();\n    rowsData();\n  }, []);\n\n  return (\n    <div className=\"App\" style={{ height: 650, width: \"100%\" }}>\n      <DataGrid rows={rows} columns={columns} pageSize={10} checkboxSelection />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}