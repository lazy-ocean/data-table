{"version":3,"sources":["components/data.tsx","components/styled.tsx","components/table/TableHeader.tsx","components/miscellaneous/typography.tsx","components/editedComponents/EditingCells.tsx","components/miscellaneous/Modal.tsx","components/table/TableFooter.tsx","components/editedComponents/EditingRow.tsx","components/miscellaneous/Spinner.tsx","components/table/TableBody.tsx","components/table/Table.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Source","DataType","useStyles","makeStyles","root","width","fontSize","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","subtitle1","paddingBottom","theme","createMuiTheme","palette","primary","main","overrides","MuiInputBase","MuiCheckbox","color","StyledTableCell","withStyles","head","backgroundColor","common","white","TableCell","StyledTableRow","TableRow","StyledYellowCell","body","StyledRedCell","StyledTableSortLabel","icon","TableSortLabel","StyledEditButton","Button","StyledFilterButton","alignSelf","marginRight","TableHeader","props","columns","rows","orderBy","order","setOrder","setOrderBy","checkedAll","checkAll","setSelected","TableHead","Checkbox","inputProps","style","checked","onClick","newSelected","map","n","id","handleSelectAllClick","column","sortDirection","field","active","direction","label","TypographySelected","selected","align","flexGrow","borderBottom","length","TypographyNoFilters","colSpan","Typography","variant","textAlign","getRows","a","axios","get","response","data","items","item","ID","UPDATE_TIMESTAMP","dateString","Date","slice","getColumns","Object","keys","config","reduce","acc","key","headerName","sortable","_","uniqueId","push","editingMapping","DESCRIPTION","placeholder","inputType","dataType","SOURCE_NM","source","values","CLIENT_NM","TERMINATION_DT","VALUE_3","defaultValue","EditedCell","input","handleChange","clients","setValues","handleDateChange","row","type","txtClasses","TextField","name","size","onChange","select","SelectProps","native","value","Autocomplete","options","e","newValue","getOptionLabel","option","renderInput","params","utils","DateFnsUtils","ThemeProvider","DatePicker","openTo","views","toString","gutterBottom","className","FilterModal","open","onClose","filterData","useState","filters","setFilters","handleClose","arg","date","month","getMonth","year","getFullYear","newDate","padStart","event","target","Dialog","aria-labelledby","PaperProps","DialogTitle","DialogContent","paddingLeft","overflowY","DialogContentText","Table","TableBody","display","flexDirection","DialogActions","TableFooterC","rowsPerPage","edited","activeFilter","setRowsData","toggleFilter","page","setPage","setRowsPerPage","React","filterModal","openFilterModal","TableFooter","criteria","filter","newData","every","toLowerCase","includes","handleFiltering","disabled","Promise","resolve","then","v","TablePagination","count","onChangeRowsPerPage","newRows","parseInt","onChangePage","pageNum","EditingRow","colsNames","saveData","Spinner","CircularProgress","stableSort","array","sorted","sortBy","obj","reverse","TableBodyC","setEdited","useMemo","col","isItemSelected","indexOf","filtered","handleSelect","toLocaleDateString","toLocaleTimeString","rowData","handleEditing","TableC","TableContainer","component","Paper","aria-label","App","classes","setColumnsData","useEffect","cols","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c6d7ddc.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport axios from \"axios\";\n\nexport enum Source {\n  UAT = \"UAT\",\n  PROD = \"PROD\",\n  DEV = \"DEV\",\n}\n\nexport enum DataType {\n  STRING = \"STRING\",\n  NUMERIC = \"NUMERIC\",\n  DATE = \"DATE\",\n  TIMESTAMP = \"TIMESTAMP\",\n  LIST = \"LIST\",\n}\n\nexport interface Data {\n  RN: number;\n  IS_ACTIVE: boolean;\n  ID: string;\n  DESCRIPTION: string;\n  SOURCE_ID: number;\n  SOURCE_NM: Source;\n  CLIENT_ID: number;\n  CLIENT_NM: string;\n  ACTIVATION_DT: Date;\n  TERMINATION_DT: Date;\n  VALUE_1: number;\n  VALUE_2: number;\n  VALUE_3: number;\n  UPDATED_BY: string;\n  UPDATE_TIMESTAMP: Date;\n}\n\nexport interface Config {\n  field: string;\n  headerName: string;\n  sortable: boolean;\n  id: number;\n  width: number;\n  label: string;\n  type: DataType;\n}\n\nconst DATA_URL = \"https://run.mocky.io/v3/6f15e3ad-bf04-4940-9b81-0f14fac8ebf2\";\nconst CONFIG_URL =\n  \"https://run.mocky.io/v3/9700b81e-1edd-49b8-8160-736b24a989a7\";\n\nconst formatDate = (dateString: string) => new Date(dateString.slice(0, -7));\n\nexport const getRows = async (): Promise<Data[]> => {\n  const response = await axios.get(DATA_URL);\n  return response.data.items.map((item: any) => ({\n    ...item,\n    id: item.ID,\n    UPDATE_TIMESTAMP: formatDate(item.UPDATE_TIMESTAMP),\n  }));\n};\n\nexport const getColumns = async (): Promise<Config[]> => {\n  const response = await axios.get(CONFIG_URL);\n  return Object.keys(response.data.config).reduce((acc: Array<any>, key) => {\n    const { label } = response.data.config[key];\n    const data = {\n      ...response.data.config[key],\n      field: key,\n      headerName: label,\n      sortable: true,\n      id: _.uniqueId(),\n    };\n    acc.push(data);\n    return acc;\n  }, []);\n};\n","import {\n  withStyles,\n  makeStyles,\n  unstable_createMuiStrictModeTheme as createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nexport const useStyles = makeStyles(() => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"11px\",\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n  subtitle1: {\n    paddingBottom: \"15px\",\n  },\n}));\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#5AA9E6\",\n    },\n  },\n  overrides: {\n    MuiInputBase: {\n      root: {\n        fontSize: 14,\n      },\n    },\n    MuiCheckbox: {\n      root: {\n        color: \"#5AA9E6\",\n      },\n    },\n  },\n});\n\nexport const StyledTableCell = withStyles(() => ({\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles(() => ({\n  root: {\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#D8EEFD\",\n    },\n    \"&.Mui-selected, &.Mui-selected:hover\": {\n      backgroundColor: \"#BADCF3\",\n    },\n  },\n}))(TableRow);\n\nexport const StyledYellowCell = withStyles(() => ({\n  body: {\n    backgroundColor: \"#FFE45E\",\n  },\n}))(TableCell);\n\nexport const StyledRedCell = withStyles(() => ({\n  body: {\n    backgroundColor: \"#F50049\",\n  },\n}))(TableCell);\n\nexport const StyledTableSortLabel = withStyles(() => ({\n  root: {\n    fontSize: \"14px\",\n    \"&:hover, &:focus\": {\n      color: \"white\",\n    },\n    \"&.MuiTableSortLabel-active\": {\n      color: \"white\",\n    },\n  },\n  icon: {\n    color: \"inherit !important\",\n  },\n}))(TableSortLabel);\n\nexport const StyledEditButton = withStyles(() => ({\n  root: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"white\",\n    border: \"1px solid #5AA9E6\",\n    \"&:hover\": {\n      backgroundColor: \"#d9efff\",\n      border: \"1px solid #5AA9E6\",\n    },\n  },\n}))(Button);\n\nexport const StyledFilterButton = withStyles(() => ({\n  root: {\n    color: \"white\",\n    alignSelf: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"#5AA9E6\",\n    },\n    marginRight: 10,\n  },\n}))(Button);\n","import React from \"react\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { StyledTableCell, StyledTableSortLabel } from \"../styled\";\n\nconst TableHeader = (props: any) => {\n  const {\n    columns,\n    rows,\n    orderBy,\n    order,\n    setOrder,\n    setOrderBy,\n    checkedAll,\n    checkAll,\n    setSelected,\n  } = props;\n\n  const handleRequestSort = (field: string) => {\n    setOrder(order === \"asc\" ? \"desc\" : \"asc\");\n    setOrderBy(field);\n  };\n\n  const handleSelectAllClick = () => {\n    if (!checkedAll) {\n      const newSelected = rows.map((n: any) => n.id);\n      checkAll(true);\n      setSelected(newSelected);\n    } else {\n      checkAll(false);\n      setSelected([]);\n    }\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <StyledTableCell padding=\"checkbox\">\n          <Checkbox\n            inputProps={{ \"aria-label\": \"select all\" }}\n            style={{ color: \"white\" }}\n            checked={checkedAll}\n            onClick={() => handleSelectAllClick()}\n          />\n        </StyledTableCell>\n        {columns.map((column: any) => (\n          <StyledTableCell\n            key={column.id}\n            id={column.id}\n            width={column.width}\n            sortDirection={orderBy === column.field ? order : false}\n          >\n            <StyledTableSortLabel\n              id={column.id}\n              active={orderBy === column.field}\n              direction={orderBy === column.field ? order : \"asc\"}\n              onClick={() => handleRequestSort(column.field)}\n            >\n              {column.label}\n            </StyledTableSortLabel>\n          </StyledTableCell>\n        ))}\n        <StyledTableCell padding=\"checkbox\" />\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeader;\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nexport const TypographySelected = (props: { selected: any[] }) => {\n  const { selected } = props;\n  return (\n    <TableCell align=\"left\" style={{ flexGrow: 1, borderBottom: \"none\" }}>\n      {selected.length\n        ? selected.length === 1\n          ? `1 item selected`\n          : `${selected.length} items selected`\n        : \"\"}\n    </TableCell>\n  );\n};\n\nexport const TypographyNoFilters = () => (\n  <TableRow>\n    <TableCell colSpan={13}>\n      <Typography variant=\"h6\" style={{ textAlign: \"center\", margin: \"30px\" }}>\n        No items matching set filters\n      </Typography>\n    </TableCell>\n  </TableRow>\n);\n","import React from \"react\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { MuiPickersUtilsProvider, DatePicker } from \"@material-ui/pickers\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { theme, useStyles } from \"../styled\";\nimport { Source } from \"../data\";\n\nconst editingMapping: any = {\n  DESCRIPTION: {\n    placeholder: \"Lorem ipsum\",\n    inputType: \"TEXT\",\n    label: \"Item description:\",\n    dataType: \"text\",\n  },\n  SOURCE_NM: {\n    inputType: \"LIST\",\n    label: \"Source:\",\n    source: Object.values(Source),\n  },\n  CLIENT_NM: {\n    inputType: \"AUTOCOMPLETE\",\n    label: \"Client name:\",\n    placeholder: \"KOG\",\n  },\n  TERMINATION_DT: {\n    inputType: \"DATE\",\n    label: \"Termination date\",\n  },\n  VALUE_3: {\n    placeholder: \"0 - 100000000\",\n    inputType: \"TEXT\",\n    label: \"Max range\",\n    dataType: \"number\",\n  },\n  defaultValue: {\n    placeholder: null,\n    inputType: null,\n    label: null,\n    dataType: null,\n  },\n};\n\nconst EditedCell = (props: any) => {\n  const {\n    field,\n    values,\n    handleChange,\n    clients,\n    setValues,\n    handleDateChange,\n    row,\n    type,\n  } = props;\n  const txtClasses = useStyles();\n  const { inputType, placeholder, label, dataType, source = null } =\n    editingMapping[field] || editingMapping.defaultValue;\n\n  let input;\n  switch (inputType) {\n    case \"TEXT\":\n      input = (\n        <TextField\n          type={dataType}\n          defaultValue={values[field]}\n          name={field}\n          size=\"small\"\n          id=\"input-descr\"\n          style={{ width: \"100%\" }}\n          onChange={handleChange}\n          placeholder={type === \"form\" ? placeholder : \"\"}\n        />\n      );\n      break;\n    case \"LIST\":\n      input = (\n        <TextField\n          id=\"select-source\"\n          select\n          defaultValue={values[field]}\n          name={field}\n          onChange={handleChange}\n          SelectProps={{\n            native: true,\n          }}\n        >\n          {(type === \"form\" ? [\"All\", ...source] : source).map(\n            (item: string) => (\n              <option key={item} value={item}>\n                {item}\n              </option>\n            )\n          )}\n        </TextField>\n      );\n      break;\n    case \"AUTOCOMPLETE\":\n      input = (\n        <Autocomplete\n          id=\"picker\"\n          size=\"small\"\n          options={clients}\n          onChange={(e, newValue) =>\n            setValues({ ...values, [field]: newValue })\n          }\n          defaultValue={values[field]}\n          getOptionLabel={(option: string) => option || \"\"}\n          renderInput={(params) => (\n            <TextField\n              /* eslint-disable react/jsx-props-no-spreading */\n              {...params}\n              variant=\"outlined\"\n              placeholder={type === \"form\" ? placeholder : \"\"}\n            />\n          )}\n        />\n      );\n      break;\n    case \"DATE\":\n      input = (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <ThemeProvider theme={theme}>\n            <DatePicker\n              variant=\"inline\"\n              openTo=\"year\"\n              name={field}\n              views={[\"year\", \"month\"]}\n              value={type === \"form\" ? values[field] : new Date(values[field])}\n              onChange={handleDateChange}\n            />\n          </ThemeProvider>\n        </MuiPickersUtilsProvider>\n      );\n      break;\n    default:\n      input = row[field].toString();\n      break;\n  }\n\n  return (\n    <TableCell>\n      {type === \"form\" && (\n        <Typography\n          variant=\"subtitle1\"\n          gutterBottom\n          className={txtClasses.subtitle1}\n        >\n          {label}\n        </Typography>\n      )}\n      {input}\n    </TableCell>\n  );\n};\n\nexport default EditedCell;\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport EditingCell from \"../editedComponents/EditingCells\";\n\nconst FilterModal = (props: any) => {\n  const row = {\n    DESCRIPTION: \"\",\n    SOURCE_NM: \"\",\n    CLIENT_NM: null,\n    TERMINATION_DT: null,\n    VALUE_3: null,\n  };\n  const { open, onClose, clients, filterData } = props;\n  const [filters, setFilters] = useState(row);\n  const filtersFields = [\n    \"DESCRIPTION\",\n    \"SOURCE_NM\",\n    \"CLIENT_NM\",\n    \"TERMINATION_DT\",\n    \"VALUE_3\",\n  ];\n\n  const handleClose = (arg: string) => {\n    if (arg === \"cancel\") {\n      setFilters(row);\n      onClose();\n    } else {\n      setFilters(row);\n      filterData(filters);\n    }\n  };\n\n  const handleDateChange = (date: Date | null) => {\n    const month = (date!.getMonth() + 1).toString();\n    const year = date?.getFullYear();\n    const newDate = `${year}-${month.padStart(2, \"0\")}`;\n    // @ts-ignore\n    setFilters({ ...filters, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { name, value } = target;\n    setFilters({ ...filters, [name]: value });\n  };\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"form-dialog-title\"\n      PaperProps={{\n        style: {\n          width: 600,\n          padding: \"20px 30px\",\n        },\n      }}\n    >\n      <DialogTitle id=\"form-dialog-title\" style={{ padding: \"15px\" }}>\n        Data filters\n      </DialogTitle>\n      <DialogContent style={{ paddingLeft: \"15px\", overflowY: \"unset\" }}>\n        <DialogContentText>Choose fields to filter rows:</DialogContentText>\n      </DialogContent>\n      <Table>\n        <TableBody>\n          <TableRow\n            style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\" }}\n          >\n            {filtersFields.map((field: string) => (\n              <EditingCell\n                field={field}\n                values={filters}\n                handleChange={handleChange}\n                clients={clients}\n                setValues={setFilters}\n                handleDateChange={handleDateChange}\n                row={row}\n                type=\"form\"\n                key={field}\n              />\n            ))}\n          </TableRow>\n        </TableBody>\n      </Table>\n      <DialogActions>\n        <Button onClick={() => handleClose(\"cancel\")} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={() => handleClose(\"save\")} color=\"primary\">\n          Filter\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default FilterModal;\n","import React from \"react\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Button from \"@material-ui/core/Button\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Table from \"@material-ui/core/Table\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { TypographySelected } from \"../miscellaneous/typography\";\nimport { StyledFilterButton } from \"../styled\";\nimport FilterModal from \"../miscellaneous/Modal\";\n\nconst TableFooterC = (props: any) => {\n  const {\n    rows,\n    rowsPerPage,\n    selected,\n    edited,\n    activeFilter,\n    getRows,\n    setRowsData,\n    toggleFilter,\n    page,\n    clients,\n    setPage,\n    setRowsPerPage,\n  } = props;\n\n  const [filterModal, openFilterModal] = React.useState<boolean>(false);\n\n  const handleModalOpen = () => {\n    openFilterModal(true);\n  };\n\n  const handleModalClose = () => {\n    openFilterModal(false);\n    toggleFilter(false);\n  };\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent> | null,\n    pageNum: number\n  ) => {\n    setPage(pageNum);\n  };\n\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newRows = e.target.value;\n    setRowsPerPage(parseInt(newRows, 10));\n    setPage(0);\n  };\n\n  const handleFiltering = (filterData: any) => {\n    const criteria = Object.keys(filterData).filter((key) => filterData[key]);\n    const newData = rows.filter((row: any) =>\n      criteria.every((item) =>\n        item === \"DESCRIPTION\"\n          ? row[item].toLowerCase().includes(filterData[item].toLowerCase())\n          : filterData[item] === row[item]\n      )\n    );\n    setRowsData(newData);\n    openFilterModal(false);\n    toggleFilter(true);\n  };\n\n  return (\n    <Table>\n      <TableFooter style={{ display: \"block\" }}>\n        <FilterModal\n          clients={clients}\n          open={filterModal}\n          onClose={handleModalClose}\n          filterData={(data: any) => handleFiltering(data)}\n        />\n        <TableRow style={{ display: \"flex\" }}>\n          <TypographySelected selected={selected} />\n          <TableCell style={{ borderBottom: \"none\", padding: 8 }}>\n            <StyledFilterButton\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleModalOpen}\n              disabled={edited !== false}\n            >\n              Filter\n            </StyledFilterButton>\n            {activeFilter && (\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={edited !== false}\n                onClick={() =>\n                  Promise.resolve(getRows())\n                    .then((v) => setRowsData(v))\n                    .then(() => toggleFilter(false))\n                }\n              >\n                Clear filters\n              </Button>\n            )}\n          </TableCell>\n          <TablePagination\n            count={rows.length}\n            rowsPerPage={rowsPerPage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            page={page}\n            onChangePage={handleChangePage}\n            style={{ borderBottom: \"none\" }}\n          />\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n};\n\nexport default TableFooterC;\n","import React, { useState } from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { StyledEditButton } from \"../styled\";\n\nimport EditingCell from \"./EditingCells\";\n\nconst EditingRow = (props: any) => {\n  const { row, colsNames, saveData, clients } = props;\n  const [values, setValues] = useState(row);\n\n  const handleDateChange = (date: Date | null) => {\n    const month = (date!.getMonth() + 1).toString();\n    const year = date?.getFullYear();\n    const newDate = `${year}-${month.padStart(2, \"0\")}`;\n    setValues({ ...values, TERMINATION_DT: newDate });\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { name, value } = target;\n    setValues({ ...values, [name]: value });\n  };\n\n  return (\n    <TableRow key={row.id}>\n      <TableCell key=\"checkbox\" padding=\"checkbox\">\n        <Checkbox disabled />\n      </TableCell>\n      {colsNames.map((field: string) => (\n        <EditingCell\n          field={field}\n          values={values}\n          handleChange={handleChange}\n          clients={clients}\n          setValues={setValues}\n          handleDateChange={handleDateChange}\n          row={row}\n          type=\"table\"\n          key={field}\n        />\n      ))}\n      <TableCell key={row.id} padding=\"checkbox\">\n        <StyledEditButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => saveData(values)}\n        >\n          Save\n        </StyledEditButton>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default EditingRow;\n","import React from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nconst Spinner = () => (\n  <TableRow>\n    <TableCell colSpan={13}>\n      <CircularProgress size={50} style={{ margin: \"0 50%\" }} />\n    </TableCell>\n  </TableRow>\n);\n\nexport default Spinner;\n","import React, { useMemo } from \"react\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport _ from \"lodash\";\nimport {\n  StyledTableRow,\n  StyledRedCell,\n  StyledYellowCell,\n  StyledEditButton,\n} from \"../styled\";\nimport EditingRow from \"../editedComponents/EditingRow\";\nimport { TypographyNoFilters } from \"../miscellaneous/typography\";\nimport Spinner from \"../miscellaneous/Spinner\";\n\nconst stableSort = (array: any[], orderBy: string, order: string): any[] => {\n  // @ts-ignore\n  const sorted = _.sortBy(array, (obj) =>\n    typeof obj[orderBy] === \"string\" ? obj[orderBy].toLowerCase() : obj[orderBy]\n  );\n  return order === \"asc\" ? sorted : sorted.reverse();\n};\n\nconst TableBodyC = (props: any) => {\n  const {\n    rows,\n    orderBy,\n    order,\n    page,\n    rowsPerPage,\n    edited,\n    setSelected,\n    selected,\n    columns,\n    setEdited,\n    setRowsData,\n    clients,\n    activeFilter,\n  } = props;\n\n  const colsNames = useMemo(() => columns.map((col: any) => col.field), [\n    columns,\n  ]);\n\n  const handleSelect = (id: string) => {\n    if (selected.includes(id)) {\n      const filtered = selected.filter((item: string) => item !== id);\n      setSelected(filtered);\n    } else {\n      setSelected([...selected, id]);\n    }\n  };\n\n  const handleEditing = (rowData: any) => {\n    const newData = rows.map((row: any) => {\n      if (row.id === edited) {\n        return Object.keys(rowData).reduce((acc: any, key) => {\n          acc[key] = rowData[key] ? rowData[key] : row[key];\n          return acc;\n        }, {});\n      }\n      return row;\n    });\n    setRowsData(newData);\n    setEdited(false);\n  };\n\n  return (\n    <TableBody>\n      {rows.length ? (\n        stableSort(rows, orderBy, order)\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n          .map((row) => {\n            const isItemSelected = selected.indexOf(row.id) !== -1;\n            return edited !== row.id ? (\n              <StyledTableRow\n                key={row.id}\n                selected={selected.indexOf(row.id) !== -1}\n              >\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    style={{ color: \"#5AA9E6\" }}\n                    checked={isItemSelected}\n                    onClick={() => handleSelect(row.id)}\n                  />\n                </TableCell>\n                {colsNames.map((field: string) => {\n                  if (field === \"VALUE_1\" && row[field] > 2000) {\n                    return row[field] < 3000 ? (\n                      <StyledYellowCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledYellowCell>\n                    ) : (\n                      <StyledRedCell key={_.uniqueId()}>\n                        {row[field]}\n                      </StyledRedCell>\n                    );\n                  }\n                  if (field === \"UPDATE_TIMESTAMP\") {\n                    /* temporary fix */\n                    return (\n                      <TableCell key={_.uniqueId()}>\n                        {row[field].toLocaleDateString()}{\" \"}\n                        {row[field].toLocaleTimeString()}\n                      </TableCell>\n                    );\n                  }\n                  return <TableCell key={_.uniqueId()}>{row[field]}</TableCell>;\n                })}\n                <TableCell key={row.id} padding=\"checkbox\">\n                  <StyledEditButton\n                    variant=\"outlined\"\n                    color=\"primary\"\n                    onClick={() => setEdited(row.id)}\n                    disabled={edited !== false && edited !== row.id}\n                  >\n                    Edit\n                  </StyledEditButton>\n                </TableCell>\n              </StyledTableRow>\n            ) : (\n              <EditingRow\n                row={row}\n                colsNames={colsNames}\n                saveData={(data: any) => handleEditing(data)}\n                clients={clients}\n                key={row.id}\n              />\n            );\n          })\n      ) : activeFilter ? (\n        <TypographyNoFilters />\n      ) : (\n        <Spinner />\n      )}\n    </TableBody>\n  );\n};\n\nexport default TableBodyC;\n","import React, { useMemo } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHeader from \"./TableHeader\";\nimport TableFooter from \"./TableFooter\";\nimport TableBody from \"./TableBody\";\nimport { getRows, Data } from \"../data\";\n\nlet Order: \"asc\" | \"desc\";\nconst TableC = (props: any) => {\n  const { rows, columns, setRowsData } = props;\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState<number>(10);\n  const [order, setOrder] = React.useState<typeof Order>(\"asc\");\n  const [orderBy, setOrderBy] = React.useState(\"RN\");\n  const [selected, setSelected] = React.useState<string[]>([]);\n  const [checkedAll, checkAll] = React.useState<boolean>(false);\n  const [edited, setEdited] = React.useState<string | false>(false);\n  const [activeFilter, toggleFilter] = React.useState<boolean>(false);\n\n  const clients = useMemo(\n    () => (rows as Data[]).map((row: Data) => row.CLIENT_NM),\n    [rows]\n  );\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\" size=\"small\">\n          <TableHeader\n            columns={columns}\n            rows={rows}\n            order={order}\n            orderBy={orderBy}\n            checkAll={checkAll}\n            checkedAll={checkedAll}\n            setOrder={setOrder}\n            setOrderBy={setOrderBy}\n            setSelected={setSelected}\n          />\n          <TableBody\n            rows={rows}\n            orderBy={orderBy}\n            order={order}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            edited={edited}\n            selected={selected}\n            setEdited={setEdited}\n            columns={columns}\n            setRowsData={setRowsData}\n            clients={clients}\n            activeFilter={activeFilter}\n            setSelected={setSelected}\n          />\n        </Table>\n      </TableContainer>\n      <TableFooter\n        rows={rows}\n        rowsPerPage={rowsPerPage}\n        selected={selected}\n        edited={edited}\n        activeFilter={activeFilter}\n        getRows={getRows}\n        setRowsData={setRowsData}\n        toggleFilter={toggleFilter}\n        setRowsPerPage={setRowsPerPage}\n        page={page}\n        setPage={setPage}\n        clients={clients}\n      />\n    </>\n  );\n};\n\nexport default TableC;\n","import \"../App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"./table/Table\";\nimport { getRows, getColumns, Data, Config } from \"./data\";\nimport { useStyles } from \"./styled\";\n\nconst App = () => {\n  const classes = useStyles();\n  const [rows, setRowsData] = useState<Data[] | []>([]);\n  const [columns, setColumnsData] = useState<Config[] | []>([]);\n\n  useEffect(() => {\n    (async () => {\n      const cols = await getColumns();\n      setColumnsData(cols);\n      const rowData = await getRows();\n      setRowsData(rowData);\n    })();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <Paper>\n        <Table rows={rows} columns={columns} setRowsData={setRowsData} />\n      </Paper>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { theme } from \"./components/styled\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}